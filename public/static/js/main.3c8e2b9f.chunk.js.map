{"version":3,"sources":["constants.js","components/Login.js","components/Header.js","components/Switch.js","components/Author.js","components/Editor.js","components/Words.js","components/WordEdit.js","components/ProgressBar.js","components/Play.js","components/Home.js","components/App.js","serviceWorker.js","index.js"],"names":["getToken","localStorage","getItem","setToken","token","setItem","getRole","setRole","role","setUserName","user_name","punctuations","id","text","type","colors","times_used","color","SIGNUP_MUTATION","gql","LOGIN_MUTATION","Login","state","isLogin","email","password","_confirm","data","a","console","log","_saveUserData","props","history","push","this","className","value","onChange","e","setState","target","placeholder","mutation","variables","onCompleted","onClick","Component","Header","isLoggedIn","to","removeItem","withRouter","Switch","isOn","handleToggle","checked","style","background","htmlFor","GET_LEVEL_WORDS","ADD_SENTENCE","REPLACE_SENTENCE","customStyles","option","styles","backgroundColor","Author","baseState","SentenceElements","formerSentenceRawText","formerSentenceCleanText","selectedWordId","wordToTeach","word_id","containsWordToTeach","points","punctuationMode","selectedPunctuationId","pinyin","english","italics","replaceMode","interval","location","sentenceElements","level","interval_order","length","addable_words","teachable_words","clean_sentences","words_left","addSentence","sentenceWords","filter","element","hasOwnProperty","sentenceWordListSimplified","map","word","cleanSentenceTextSimplified","join","includes","alert","getSentenceVariables","sentenceContainedWordListSimplified","rawSentenceTextSimplified","displaySentenceTextSimplified","replace","RegExp","cleanSentenceTextTraditional","alt_text","rawSentenceTextTraditional","displaySentenceTextTraditional","shouldCall","resultObj","wordToTeachText","wordToTeachId","currentInterval","Object","assign","newElement","prevState","slice","minimum_usage","max_usage","find","colorType","parseInt","query","loading","error","refetch","wordArray","get_word_array","min_length","max_length","fontSize","popElement","bind","hidden","label","mark","options","appendElement","getColor","width","update","store","submitSentenceData","sentences","sentence","clean_text","disabled","GET_DROPDOWNS","GET_SENTENCE_LIST","Editor","selectedLevel","selectedInterval","userName","getIntervalsAndLevels","levels","selected","intervals","current_index","display_text_copy","display_text","words_contained","sort","previous","next","contains_order","word_taught","substring","Word","pathname","raw_text","levelNumber","intervalOrder","getDropdowns","getSentenceList","parseSentence","GET_WORDS","Words","word_list","Level","all_words","level_number","editWord","EDIT_WORD","WordEdit","ProgressBar","bgcolor","completed","fillerStyles","height","borderRadius","textAlign","MAKE_ATTEMPT","GET_SENTENCE","Play","showAnswer","showCharacterDefinitions","userResponse","isCorrect","lastSentenceId","audio","timeFetched","correct_response","alreadySeen","sentenceId","wordId","Howl","src","play","makeAttempt","time_fetched","alreadySeenWord","nextIntervalSentenceId","display","flexDirectioion","justifyContent","getNextSentence","_id","already_seen","next_interval_sentence_id","getCurrentProgress","words_learned","total_word_count","intervals_completed","playSound","characters","char","getText","checkAnswer","setAudio","substr","indexOf","margin","getFontColor","onKeyDown","key","submitAnswer","marginLeft","Home","App","exact","path","component","Boolean","window","hostname","match","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.3c8e2b9f.chunk.js","sourcesContent":["const AUTH_TOKEN = 'auth-token';\nconst ROLE = 'role';\nconst USER_NAME = 'user_name';\n\n\nexport const getToken = () => localStorage.getItem(AUTH_TOKEN);\nexport const setToken = token => localStorage.setItem(AUTH_TOKEN, token);\nexport const deleteToken = () => localStorage.removeItem(AUTH_TOKEN);\n\nexport const getRole = () => localStorage.getItem(ROLE);\nexport const setRole = role => localStorage.setItem(ROLE, role);\nexport const deleteRole = () => localStorage.removeItem(ROLE);\n\n\nexport const getUserName = () => localStorage.getItem(USER_NAME);\nexport const setUserName = user_name => localStorage.setItem(USER_NAME, user_name);\nexport const deleteUserName = () => localStorage.removeItem(USER_NAME);\n\nexport const punctuations = [\n\t{id: 1, text: '，', type: 'COMMA'},\n\t{id: 2, text: '。', type: 'PERIOD'},\n\t{id: 3, text: '”', type: 'QUOTE'},\n\t{id: 4, text: '！', type: 'EXCLAMATION'},\n\t{id: 5, text: '？', type: 'QUESTION'},\n\t{id: 6, text: '：', type: 'COLON'},\n\t{id: 7, text: '0', type: 'ZERO'},\n\t{id: 8, text: '1', type: 'ONE'},\n\t{id: 9, text: '2', type: 'TWO'},\n\t{id: 10, text: '3', type: 'THREE'},\n\t{id: 11, text: '4', type: 'FOUR'},\n\t{id: 12, text: '5', type: 'FIVE'},\n\t{id: 13, text: '6', type: 'SIX'},\n\t{id: 14, text: '7', type: 'SEVEN'},\n\t{id: 15, text: '8', type: 'EIGHT'},\n\t{id: 16, text: '9', type: 'NINE'},\n\t{id: 17, text: ' ', type: 'SPACE'},\n\t{id: 18, text: 'Smith', type: 'NAME'}\n]\n\nexport const colors = [\n\t{times_used: 0, color: 'lightblue'},\n\t{times_used: 1, color: 'pink'},\n\t{times_used: 2, color: 'yellow'},\n\t{times_used: 3, color: 'lightgreen'},\n\t{times_used: 4, color: 'coral'},\n\t{times_used: 5, color: 'blueviolet'}\n]","import React, { Component } from 'react'\nimport { setToken, setRole, setUserName } from '../constants'\nimport gql from 'graphql-tag'\nimport { Mutation} from 'react-apollo'\n\n\nconst SIGNUP_MUTATION = gql`\n  mutation SignupMutation($email: String!, $password: String!, $user_name: String!) {\n    CreateUser(email: $email, password: $password, user_name: $user_name) {\n      _id\n      user_name\n      password\n      token\n      role\n    }\n  }\n`\n\nconst LOGIN_MUTATION = gql`\n  mutation LoginMutation($email: String!, $password: String!) {\n    Login(email: $email, password: $password) {\n      _id\n      user_name\n      password\n      token\n      role\n    }\n  }\n`\n\nclass Login extends Component {\n  state = {\n    isLogin: true, // switch between Login and SignUp\n    email: '',\n    password: '',\n    user_name: '',\n  }\n\n render() {\n    const { isLogin, email, password, user_name } = this.state\n    return (\n    <div>\n      <h4>{isLogin ? 'Login' : 'Sign Up'}</h4>\n\n      <div className=\"flex flex-column\">\n        {!isLogin && (\n          <input\n            value={user_name}\n            onChange={e => this.setState({ user_name: e.target.value })}\n            type=\"text\"\n            placeholder=\"Your name\"\n          />\n        )}\n        <input\n          value={email}\n          onChange={e => this.setState({ email: e.target.value })}\n          type=\"text\"\n          placeholder=\"Your email address\"\n        />\n        <input\n          value={password}\n          onChange={e => this.setState({ password: e.target.value })}\n          type=\"password\"\n          placeholder=\"Choose a safe password\"\n        />\n      </div>\n      <div>\n      <Mutation\n        mutation={isLogin ? LOGIN_MUTATION : SIGNUP_MUTATION}\n        variables={{ email, password, user_name}}\n        onCompleted={data => this._confirm(data)}\n      >\n        {mutation => (\n          <button\n            type=\"button\"\n            onClick={mutation}\n          >\n            {isLogin ? 'login' : 'create account'}\n          </button>\n        )}\n      </Mutation>\n      <button\n        type=\"button\"\n        onClick={() => this.setState({ isLogin: !this.state.isLogin })}\n      >\n        {isLogin ? 'need to create an account?' : 'already have an account?'}\n      </button>\n      </div>\n    </div>\n  )\n\n }\n\n _confirm = async data => {\n  console.log(data)\n  const { token, user_name, role } = data.Login\n  this._saveUserData(token, user_name, role)\n  this.props.history.push(`/`)\n}\n\n  _saveUserData = (token, user_name, role) => {\n    setToken(token)\n    setUserName(user_name)\n    setRole(role)\n  }\n\n}\n\n\nexport default Login","import React, { Component } from 'react'\nimport { withRouter } from 'react-router'\nimport { Link } from 'react-router-dom'\nimport { getToken, deleteToken, getRole } from '../constants'\n\nclass Header extends Component {\n\n  render() {\n    const isLoggedIn = !!getToken();\n\n    return (\n      <div>\n        <div>Chinese App</div>\n        <Link to=\"/\">\n            home\n          </Link>\n          <div>\n        {isLoggedIn && getRole() === 'ADMIN' && (\n          <div>\n            <div className=\"flex\">\n              <Link to=\"/author\">\n                author\n              </Link>\n            </div>\n            <div className=\"flex\">\n              <Link to=\"/editor\">\n                editor\n              </Link>\n            </div>\n            <div className=\"flex\">\n              <Link to=\"/words\">\n                words\n              </Link>\n            </div>\n          </div>\n          )}\n          {isLoggedIn && (\n            <div className=\"flex\">\n              <Link to=\"/play\">\n                play\n              </Link>\n            </div>\n          )}\n          </div>   \n        <div className=\"flex flex-fixed\">\n          {isLoggedIn ? (\n            <div\n              onClick={() => {\n                deleteToken()\n                this.props.history.push('/')\n              }}\n            >\n              logout\n            </div>\n          ) : (\n            <Link to=\"/login\">\n              login\n            </Link>\n          )}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default withRouter(Header)","import React from 'react';\nimport '../styles/Switch.css';\n\nconst Switch = ({ isOn, handleToggle }) => {\n  return (\n    <>\n      <input\n        checked={isOn}\n        onChange={handleToggle}\n        className=\"react-switch-checkbox\"\n        id={`react-switch-new`}\n        type=\"checkbox\"\n      />\n      <label\n        style={{ background: isOn && '#06D6A0' }}\n        className=\"react-switch-label\"\n        htmlFor={`react-switch-new`}\n      >\n        <span className={`react-switch-button`} />\n      </label>\n    </>\n  );\n};\n\nexport default Switch;","import React, { Component } from 'react'\nimport gql from 'graphql-tag';\nimport { Mutation, Query} from 'react-apollo';\nimport '../styles/App.css';\nimport {punctuations, colors} from '../constants.js'\nimport Switch from \"./Switch\";\nimport Select from \"react-select\";\n\n\nexport const GET_LEVEL_WORDS = gql`\n  query GetLevelWords{\n  Author{\n    level{\n      level_number\n      points\n      minimum_usage\n      teachable_words{\n        text\n        alt_text\n        word_id\n        level{\n          points\n        }\n      }\n      addable_words{\n        text\n        alt_text\n        word_id\n        times_used\n        level{\n          points\n        }\n      }\n    }\n    interval{\n      sentences{\n        clean_text\n      }\n      interval_order\n      seconds\n      min_length\n      max_length\n    }\n  }\n}\n`\n\nconst ADD_SENTENCE = gql`\n  mutation addsentence($rawSentenceTextSimplified: String!, $cleanSentenceTextSimplified: String!, $displaySentenceTextSimplified: String!,$rawSentenceTextTraditional: String!, $cleanSentenceTextTraditional: String!, $displaySentenceTextTraditional: String!, $pinyin: String!, $english: String!, $italics: String!, $wordToTeachId: Int!, $sentenceContainedWordListSimplified: [String!], $currentInterval: Int!, $shouldCall: Boolean!) {\n    CreateSentence(raw_text: $rawSentenceTextSimplified, clean_text: $cleanSentenceTextSimplified, display_text: $displaySentenceTextSimplified, alt_raw_text: $rawSentenceTextTraditional, alt_clean_text: $cleanSentenceTextTraditional, alt_display_text: $displaySentenceTextTraditional, pinyin: $pinyin, english: $english, italics: $italics) {\n      raw_text\n    }\n    AddSentenceLevel(from: {raw_text:  $rawSentenceTextSimplified} to: {level_number: 1}){\n      from {raw_text}\n      to {level_number}\n    }\n    AddSentenceWord_taught(from: {raw_text: $rawSentenceTextSimplified} to: {word_id: $wordToTeachId}){\n      from {raw_text}\n      to {text}\n    }\n    AddSentenceInterval(from: {raw_text: $rawSentenceTextSimplified} to: {interval_order: $currentInterval}){\n      from {raw_text}\n      to {interval_order}\n    }\n    AddSentenceDependencies(src_sentence: $rawSentenceTextSimplified, dest_words: $sentenceContainedWordListSimplified){\n      raw_text\n      display_text\n    }\n    IncrementInterval(should_call: $shouldCall)\n  }\n\n`\n\nconst REPLACE_SENTENCE = gql`\n  mutation replacesentence($rawSentenceTextSimplified: String!, $cleanSentenceTextSimplified: String!, $displaySentenceTextSimplified: String!,$rawSentenceTextTraditional: String!, $cleanSentenceTextTraditional: String!, $displaySentenceTextTraditional: String!, $pinyin: String!, $english: String!, $italics: String! $wordToTeachId: Int!, $sentenceContainedWordListSimplified: [String!], $currentInterval: Int!, $formerSentenceRawText: String!) {\n    DeleteSentence(raw_text: $formerSentenceRawText){\n      raw_text\n    }\n    CreateSentence(raw_text: $rawSentenceTextSimplified, clean_text: $cleanSentenceTextSimplified, display_text: $displaySentenceTextSimplified, alt_raw_text: $rawSentenceTextTraditional, alt_clean_text: $cleanSentenceTextTraditional, alt_display_text: $displaySentenceTextTraditional, pinyin: $pinyin, english: $english,, italics: $italics) {\n      raw_text\n    }\n    AddSentenceLevel(from: {raw_text:  $rawSentenceTextSimplified} to: {level_number: 1}){\n      from {raw_text}\n      to {level_number}\n    }\n    AddSentenceWord_taught(from: {raw_text: $rawSentenceTextSimplified} to: {word_id: $wordToTeachId}){\n      from {raw_text}\n      to {text}\n    }\n    AddSentenceInterval(from: {raw_text: $rawSentenceTextSimplified} to: {interval_order: $currentInterval}){\n      from {raw_text}\n      to {interval_order}\n    }\n    AddSentenceDependencies(src_sentence: $rawSentenceTextSimplified, dest_words: $sentenceContainedWordListSimplified){\n      raw_text\n      display_text\n    }\n  }\n\n`\nconst customStyles = {\n\n  option: (styles, { data}) => {\n    return {\n      ...styles,\n      color: \"black\",\n      backgroundColor: data.color\n    }\n  }\n\n}\n\nclass Author extends Component {\n  constructor(props){\n    super(props)\n    this.baseState = {\n        SentenceElements: [],\n        formerSentenceRawText: null,\n        formerSentenceCleanText: null,\n        selectedWordId: null,\n        wordToTeach: {text: '', word_id: null},\n        containsWordToTeach: 0,\n        points: 0,\n        punctuationMode: false,\n        selectedPunctuationId: null,\n        pinyin: '',\n        english: '',\n        italics: '',\n        replaceMode: false,\n        interval: null\n      }\n    if(typeof props.location.state === 'undefined'){\n      this.state = this.baseState\n    } else {\n        this.state = {\n          SentenceElements: props.location.state.sentenceElements,\n          formerSentenceRawText: props.location.state.formerSentenceRawText,\n          formerSentenceCleanText: props.location.state.formerSentenceCleanText,\n          selectedWordId: null,\n          wordToTeach: props.location.state.wordToTeach,\n          containsWordToTeach: props.location.state.containsWordToTeach,\n          points: props.location.state.points,\n          punctuationMode: false,\n          selectedPunctuationId: null,\n          pinyin: props.location.state.pinyin,\n          english: props.location.state.english,\n          italics: props.location.state.italics,\n          interval: props.location.state.interval,\n          replaceMode: true\n        }\n      }\n  }\n\n  get_word_array(level, interval_order) {\n    let arr = []\n    const wordToTeach = this.state.wordToTeach\n    if(wordToTeach && wordToTeach.text.length && interval_order === 1){\n        arr = [wordToTeach, ...level.addable_words]\n      } else if (wordToTeach && wordToTeach.text.length && interval_order > 1){\n          arr = level.addable_words\n      } else{\n        arr = level.teachable_words\n      }\n    return arr\n  }\n\n\n  submitSentenceData(clean_sentences, interval_order, words_left, addSentence){\n    const SentenceElements = this.state.SentenceElements\n    const sentenceWords = SentenceElements.filter( element => element.hasOwnProperty('word_id') )\n    const sentenceWordListSimplified = sentenceWords.map(word => word.text)\n    const cleanSentenceTextSimplified = sentenceWordListSimplified.join('')\n\n    if(clean_sentences.includes(cleanSentenceTextSimplified) && cleanSentenceTextSimplified !== this.state.formerSentenceCleanText){\n      alert(\"Already used this sentence. Please change it.\")\n    }\n    else{\n        addSentence({ variables: this.getSentenceVariables(SentenceElements, sentenceWords,sentenceWordListSimplified,cleanSentenceTextSimplified, interval_order, words_left)})\n    }\n  }\n\n  getSentenceVariables(SentenceElements, sentenceWords, sentenceWordListSimplified,cleanSentenceTextSimplified, interval_order, words_left) {\n    const { wordToTeach, pinyin, english, italics, formerSentenceRawText, replaceMode} = this.state\n\n    const sentenceContainedWordListSimplified = sentenceWordListSimplified.filter(word => word !== wordToTeach.text)\n    const SentenceElementListSimplified = SentenceElements.map(element => element.text)\n    const rawSentenceTextSimplified = SentenceElementListSimplified.join('')\n    const displaySentenceTextSimplified = rawSentenceTextSimplified.replace(new RegExp(wordToTeach.text, 'g'), '#')\n\n    const sentenceWordListTraditional = sentenceWords.map(word => word.alt_text)\n    const cleanSentenceTextTraditional = sentenceWordListTraditional.join('')\n    const SentenceElementListTraditional = SentenceElements.map(element => element.alt_text || element.text)\n    const rawSentenceTextTraditional = SentenceElementListTraditional.join('')\n    const displaySentenceTextTraditional = rawSentenceTextTraditional.replace(new RegExp(wordToTeach.alt_text, 'g'), '#')\n\n    const wordToTeachText = wordToTeach.text\n    const wordToTeachId = wordToTeach.word_id\n    const currentInterval = interval_order\n    const shouldCall =  words_left === 1 && currentInterval < 5\n\n    var resultObj ={rawSentenceTextSimplified,cleanSentenceTextSimplified, displaySentenceTextSimplified,rawSentenceTextTraditional,cleanSentenceTextTraditional, displaySentenceTextTraditional, pinyin, english, italics, wordToTeachText,wordToTeachId,sentenceContainedWordListSimplified,currentInterval}\n\n    if(replaceMode){\n      Object.assign(resultObj,{formerSentenceRawText})\n    } else{\n      Object.assign(resultObj,{shouldCall})\n    }\n\n    return resultObj\n  }\n\n  appendElement(newElement) {\n    if(!newElement.hasOwnProperty('word_id')){\n      this.setState(prevState => \n      ({\n        SentenceElements: [...prevState.SentenceElements, newElement]\n      })) \n    } else {\n      this.setState(prevState => \n        ({\n          points: prevState.points + newElement.level.points, \n          containsWordToTeach: newElement.word_id === this.state.wordToTeach.word_id ? prevState.containsWordToTeach + 1 : prevState.containsWordToTeach,\n          SentenceElements: [...prevState.SentenceElements, newElement]\n        }))\n    }\n  }\n\n  popElement() {\n    if(!this.state.SentenceElements[this.state.SentenceElements.length - 1].hasOwnProperty('word_id')){\n     this.setState(prevState => \n      ({\n        SentenceElements: prevState.SentenceElements.slice(0,-1)\n      }))     \n    } else {\n    this.setState(prevState => \n      ({\n        points: prevState.points - prevState.SentenceElements[prevState.SentenceElements.length - 1].level.points, \n        containsWordToTeach: prevState.SentenceElements[prevState.SentenceElements.length - 1].word_id === this.state.wordToTeach.word_id ? prevState.containsWordToTeach - 1 : prevState.containsWordToTeach,\n        SentenceElements: prevState.SentenceElements.slice(0,-1)\n      }))\n    }\n  }\n\n  getColor(word, minimum_usage){\n    var color = 'white'\n    const max_usage = minimum_usage + 5\n    if(word.hasOwnProperty('times_used')){\n      color = colors.find((colorType) => colorType.times_used + minimum_usage === parseInt(word.times_used) || (colorType.times_used === 5 && parseInt(word.times_used) >= max_usage)).color\n    }\n    return color\n  }\n\n  render() {\n    const { SentenceElements, wordToTeach, points, selectedWordId, containsWordToTeach, punctuationMode,selectedPunctuationId} = this.state\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Query query={GET_LEVEL_WORDS}>\n          {({ loading, error, data, refetch }) => {\n              if (loading) return <div>Fetching</div>\n              if (error) return <div>Error</div>\n              const interval = this.state.interval || data.Author[0].interval\n              const wordArray = this.get_word_array(data.Author[0].level, interval.interval_order)\n              const minimum_usage = parseInt(data.Author[0].level.minimum_usage)\n               return (\n                <div>\n                <div className=\"Author-dashboard\">\n                  <p>{\"Interval: \" + interval.interval_order}</p>\n                  <p>{\"Minimum points: \" + interval.min_length}</p>\n                  <p>{\"Maximum points:: \" + interval.max_length}</p>\n                  <p>{\"Current Points: \" + points}</p>\n                </div>\n                <p>Word being learned: {wordToTeach.text}</p>\n                <div>\n                <p style={{fontSize: \"30px\"}}>{SentenceElements.length ?  SentenceElements.map(word => word.text).join('') : null}</p>\n               <button\n                onClick={this.popElement.bind(this)}\n                hidden={SentenceElements.length === 0}\n                >\n                Backspace\n                </button>\n                </div>\n                <Switch isOn={punctuationMode} handleToggle={() => \n                  this.setState(prevState => ({punctuationMode: !prevState.punctuationMode}))} />\n                  {punctuationMode ?\n                    (\n                      <div>\n                    <Select\n                    styles={customStyles}\n                    value={{value: selectedPunctuationId, label: selectedPunctuationId && punctuations.find(mark=> mark.id === selectedPunctuationId).text}}\n                    options={punctuations.map(mark =>  { return { label: mark.text, value: mark.id}})}\n                    onChange={option => this.setState({selectedPunctuationId: parseInt(option.value)})}>\n                    </Select>    \n                   <button onClick={() => this.appendElement(punctuations.find(mark=> mark.id === selectedPunctuationId))}>\n                    Add\n                    </button>\n                    </div>\n                  ) : (\n                    <div>\n                  <Select\n                    styles={customStyles}\n                    value={{value: selectedWordId, label: selectedWordId && wordArray.find(word=> word.word_id === selectedWordId).text}}\n                    options={wordArray.map(word =>  { return { label: word.text, value: word.word_id, color: this.getColor(word,minimum_usage)}})}\n                    onChange={option => this.setState({selectedWordId: parseInt(option.value)})}>\n                    </Select>                    \n                     <button\n                      onClick={wordToTeach.text.length ? () => this.appendElement(wordArray.find(word=> word.word_id === selectedWordId)) : \n                        () => {this.setState({wordToTeach: wordArray.find(word=> word.word_id === selectedWordId)})}}\n                      >\n                      {wordToTeach.text.length ? \"Add\" : \"Learn\"}\n                      </button>\n                    </div>\n                    )\n                }\n                  <div>\n                    <input\n                      value={this.state.pinyin}\n                      onChange={e => this.setState({ pinyin: e.target.value })}\n                      type=\"pinyin\"\n                      placeholder=\"Enter sentence's pinyin\"\n                      style={{width: \"250px\"}}\n                    />\n                  </div>\n                  <div>\n                    <input\n                      value={this.state.english}\n                      onChange={e => this.setState({ english: e.target.value })}\n                      type=\"english\"\n                      placeholder=\"Enter sentence's english translation\"\n                      style={{width: \"250px\"}}\n                    />\n                  </div>\n                  <div>\n                    <input\n                      value={this.state.italics}\n                      onChange={e => this.setState({ italics: e.target.value })}\n                      type=\"italics\"\n                      placeholder=\"Enter sentence's extra notes\"\n                      style={{width: \"250px\"}}\n                    />\n                  </div>\n                   <Mutation mutation={this.state.replaceMode ? REPLACE_SENTENCE : ADD_SENTENCE}\n                      update={(store) => {\n                        this.setState(this.baseState)\n                        refetch()                      \n                        }\n                      }\n                   >\n                        {addSentence => (\n                          <button\n                            onClick={() => \n                              {\n                                this.submitSentenceData(interval.sentences.map((sentence) => sentence.clean_text), interval.interval_order,data.Author[0].level.teachable_words.length, addSentence)\n                              }\n                          }\n                            disabled={!containsWordToTeach/* || points <  interval.min_length || points >  interval.max_length*/}\n                          >\n                          Submit\n                          </button>\n                        )}\n                    </Mutation>\n                    <div>\n                    <button onClick={() => this.setState(this.baseState) }>\n                    Clear Sentence\n                    </button>\n                    </div>\n                  </div>\n                  )\n                }}\n            </Query>\n        </header>\n        \n      </div>\n    \n    );\n  }\n}\n\nexport default Author;\n","import React, { Component } from 'react'\nimport {Query} from 'react-apollo';\nimport gql from 'graphql-tag';\n\nconst GET_DROPDOWNS = gql`\n  query getDropdowns($userName: String!) {\n\tgetIntervalsAndLevels(userName: $userName) {\n\t\tlevels\n\t\tintervals\n\t}\n  }\n`\n\nconst GET_SENTENCE_LIST = gql`\n  query getSentences($levelNumber: Int! $intervalOrder: Int!) {\n\tgetSentenceList(levelNumber: $levelNumber intervalOrder: $intervalOrder) {\n\t\traw_text\n\t\tclean_text\n\t\twords_contained{\n\t\t\tcontains_order\n\t\t\tWord{\n\t\t\t\tword_id\n\t\t\t\ttext\n\t\t\t\talt_text\n\t\t\t\tlevel{\n\t\t\t\t\tpoints\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tdisplay_text\n\t\tword_taught{\n\t\t\tword_id\n\t\t\ttext\n\t\t\talt_text\n\t\t\tlevel{\n\t\t\t\tpoints\n\t\t\t}\n\t\t}\n\t\tpinyin\n\t\tenglish\n\t\titalics\n\t\tinterval{\n\t        sentences{\n\t          clean_text\n\t        }\n\t\t\tinterval_order\n      \t\tseconds\n      \t\tmin_length\n      \t\tmax_length\n\t\t}\n\t}\n  }\n`\n\n\nclass Editor extends Component {\n\tstate = {\n      selectedLevel: 1,\n      selectedInterval: 1\n    }\n\n\n  getDropdowns(refetch){\n  \treturn (\n\t\t<Query query={GET_DROPDOWNS} variables={{userName: \"test\"}}>\n      \t{({ loading, error, data, refetch }) => {\n      \t  if (loading) return <div>Fetching</div>\n          if (error) return <div>Error</div>\n          return(\n          \t<div>\n          \tLevel: <select onChange={(e) => this.setState({selectedLevel: parseInt(e.target.value)})}>{data.getIntervalsAndLevels.levels.map((level) => <option value={level} selected={level === this.state.selectedLevel}>{level}</option>)}</select>\n          \tInterval: <select onChange={(e) => this.setState({selectedInterval: parseInt(e.target.value)})}>{data.getIntervalsAndLevels.intervals.map((interval) => <option value={interval} selected={interval === this.state.selectedInterval}>{interval}</option>)}</select>\n          \t</div>\n          )\n      \t}\n      }\n\t\t</Query>\n  \t)\n\n  }\n\n  parseSentence(sentence){\n  \tlet current_index = 0\n  \tlet sentenceElements = []\n  \tlet wordToTeach = null\n  \tlet containsWordToTeach = 0\n  \tlet points = 0\n  \tlet display_text_copy = sentence.display_text\n  \tconsole.log(sentence)\n  \tsentence.words_contained.sort((previous, next)=> {return previous.contains_order - next.contains_order})\n  \twhile(display_text_copy.length){\n  \t\tif(display_text_copy[0] === '#'){\n  \t\t\tsentenceElements.push({text: sentence.word_taught.text, alt_text: sentence.word_taught.alt_text, word_id: sentence.word_taught.word_id, level: {points: sentence.word_taught.level.points}})\n  \t\t\tif(wordToTeach === null){\n  \t\t\t\twordToTeach = {text: sentence.word_taught.text, alt_text: sentence.word_taught.alt_text, word_id: sentence.word_taught.word_id, level: {points: sentence.word_taught.level.points}}\n  \t\t\t}\n  \t\t\tdisplay_text_copy = display_text_copy.substring(1)\n  \t\t\tcontainsWordToTeach++\n  \t\t\tpoints += sentence.word_taught.level.points\n  \t\t} else if(sentence.words_contained[current_index] && sentence.words_contained[current_index].Word.text[0] === display_text_copy[0]){\n  \t\t\tconsole.log(sentence)\n  \t\t\tsentenceElements.push({ text: sentence.words_contained[current_index].Word.text, alt_text: sentence.words_contained[current_index].Word.alt_text, word_id: sentence.words_contained[current_index].Word.word_id, level: {points: sentence.words_contained[current_index].Word.level.points}})\n  \t\t\tdisplay_text_copy = display_text_copy.substring(sentence.words_contained[current_index].Word.text.length)\n  \t\t\tpoints += sentence.words_contained[current_index].Word.level.points\n  \t\t\tcurrent_index++\n  \t\t} else {\n  \t\t\t sentenceElements.push({text: display_text_copy[0]})\n  \t\t\t display_text_copy = display_text_copy.substring(1)\n  \t\t}\n  \t}\n\n\tthis.props.history.push({\n\t\tpathname: '/author',\n\t\tstate: {\n\t\t\tsentenceElements: sentenceElements, \n\t\t\tformerSentenceRawText: sentence.raw_text,\n\t\t\tformerSentenceCleanText: sentence.clean_text,\n\t\t\twordToTeach: wordToTeach,\n\t\t\tcontainsWordToTeach: containsWordToTeach,\n\t\t\tpinyin: sentence.pinyin,\n\t\t\tenglish: sentence.english,\n\t\t\titalics: sentence.italics,\n\t\t\tpoints: points,\n\t\t\tinterval: sentence.interval\n\t\t}  \n\t})\t\t\t\t\t\t\n  }\n\n\trender(){\n\t\treturn(\n\t    <div className=\"App\">\n\t      <header className=\"App-header\">\n\t\t      <Query query={GET_SENTENCE_LIST} variables={{levelNumber: this.state.selectedLevel, intervalOrder: this.state.selectedInterval}}>\n\t\t      \t{({ loading, error, data, refetch }) => {\n\t\t      \t  if (loading) return <div>Fetching</div>\n\t              if (error) return <div>Error</div>\n\t              return(\n\t              \t<div>\n\t              \t\t{this.getDropdowns()}\n\t              \t\t<table>\n\t              \t\t  <thead>\n\t\t\t\t\t\t    <tr>\n\t\t\t\t\t\t      <th>Sentence</th>\n\t\t\t\t\t\t      <th>Word Taught</th>\n\t\t\t\t\t\t      <th>Pinyin</th>\n\t\t\t\t\t\t      <th>Translation</th>\n\t\t\t\t\t\t      <th>Notes</th>\n\t\t\t\t\t\t    </tr>\n\t\t\t\t\t\t  </thead>\n\t              \t\t<tbody>\n\t              \t\t{data.getSentenceList.map(sentence => {\n\t              \t\t\treturn(\n\t\t              \t\t\t<tr>\n\t\t              \t\t\t <td>{sentence.raw_text}</td>\n\t\t              \t\t\t <td>{sentence.word_taught.text}</td>\n\t\t              \t\t\t <td>{sentence.pinyin}</td>\n\t\t              \t\t\t <td>{sentence.english}</td>\n\t\t              \t\t\t <td>{sentence.italics}</td>\n\t\t              \t\t\t <td><button onClick={() => this.parseSentence(sentence)}>Edit</button></td>\n\t\t              \t\t\t</tr>\n\t\t              \t\t)\n\t              \t\t})}\n\t              \t\t</tbody>\n\t              \t\t</table>\n\t              \t</div>\n\t              )\n\t          \t}\n\t          }\n\t\t\t\t</Query>\n\t\t\t</header>\n\t\t</div>\n\t\t)\n\t}\n\n\n\n}\n\nexport default Editor;","import React, { Component } from 'react'\nimport {Query} from 'react-apollo';\nimport gql from 'graphql-tag';\n\nconst GET_WORDS = gql`\n  query getWords {\n\tLevel {\n\t\tall_words{\n\t\t\tword_id\n\t\t\ttext\n\t\t\tpinyin\n\t\t\tenglish\n\t\t\titalics\n\t\t\ttimes_used\n\t\t\tlevel{\n\t\t\t\tlevel_number\n\t\t\t}\n\t\t}\n\t}\n  }\n`\n\n\nclass Words extends Component {\n\n\teditWord(word){\n\t\tthis.props.history.push({\n\t\t\tpathname: '/wordedit',\n\t\t\tstate: {\n\t\t\t\tword_id: word.word_id,\n\t\t\t\ttext: word.text,\n\t\t\t\tpinyin: word.pinyin,\n\t\t\t\tenglish: word.english,\n\t\t\t\titalics: word.italics\n\t\t\t}  \n\t\t})\n\t}\n\trender(){\n\t  return (\n\t    <div className=\"App\">\n\t      <header className=\"App-header\">\n\t\t      <Query query={GET_WORDS}>\n\t\t      \t{({ loading, error, data, refetch }) => {\n\t\t      \t  if (loading) return <div>Fetching</div>\n\t              if (error) return <div>error</div>\n\t              const word_list = data.Level[0].all_words\n\t              return(\n\t              \t\t <table>\n\t              \t\t  <thead>\n\t\t\t\t\t\t    <tr>\n\t\t\t\t\t\t      <th>Word</th>\n\t\t\t\t\t\t      <th>Pinyin</th>\n\t\t\t\t\t\t      <th>Translation</th>\n\t\t\t\t\t\t      <th>Notes</th>\n\t\t\t\t\t\t      <th>Times Used</th>\n\t\t\t\t\t\t      <th>Level</th>\n\t\t\t\t\t\t    </tr>\n\t\t\t\t\t\t  </thead>\n\t              \t\t<tbody>\n\t              \t\t{word_list.map(word => {\n\t              \t\t\treturn(\n\t\t              \t\t\t<tr>\n\t\t              \t\t\t <td>{word.text}</td>\n\t\t              \t\t\t <td>{word.pinyin}</td>\n\t\t              \t\t\t <td>{word.english}</td>\n\t\t              \t\t\t <td>{word.italics}</td>\n\t\t              \t\t\t <td>{word.times_used}</td>\n\t\t              \t\t\t <td>{word.level ? word.level.level_number : 0}</td>\n\t\t              \t\t\t <td><button onClick={() => this.editWord(word)}>Edit</button></td>\n\t\t              \t\t\t</tr>\n\t\t              \t\t)\n\t              \t\t})}\n\t              \t\t</tbody>\n\t              \t\t</table>\n\t              )\n\t          \t}\n\t      \t\t}\n\t          </Query>\n\t      </header>\n\t    </div>\n\t  );\n  \t}\n}\n\nexport default Words","import React, { Component } from 'react'\nimport { Mutation} from 'react-apollo';\nimport gql from 'graphql-tag';\nimport '../styles/App.css';\n\nconst EDIT_WORD = gql`\n  mutation editWord($word_id: Int!, $english: String, $italics: String) {\n  \tUpdateWord(word_id: $word_id, english: $english, italics: $italics){\n  \t\tword_id\n  \t\ttext\n  \t}\n  }\n`\n\nclass WordEdit extends Component {\n\tconstructor(props){\n    super(props)\n    this.state = {\n      word_id: props.location.state.word_id,\n      text: props.location.state.text,\n      pinyin: props.location.state.pinyin,\n      english: props.location.state.english,\n      italics: props.location.state.italics\n    }\n  }\n\trender(){\n\t  return (\n\t    <div className=\"App\">\n\t      <header className=\"App-header\">\n\t        <p>{this.state.text}</p>\n\t        <p>{this.state.pinyin}</p>\n\t        <p>Translation</p>\n            <input\n              value={this.state.english}\n              onChange={e => this.setState({ english: e.target.value })}\n              type=\"english\"\n              placeholder=\"Enter word's english translation\"\n              style={{width: \"250px\"}}\n            />\n            <p>Notes</p>\n\t        <input\n              value={this.state.italics}\n              onChange={e => this.setState({ italics: e.target.value })}\n              type=\"italics\"\n              placeholder=\"Enter word's extra notes\"\n              style={{width: \"250px\"}}\n            />\n            <Mutation mutation={EDIT_WORD}\n               update={(store) => {\n                   this.props.history.push({pathname: '/words' })                   \n                }}\n             >\n\t            {editWord => (\n\t              <button onClick={() => editWord({variables: {word_id: parseInt(this.state.word_id), english: this.state.english, italics: this.state.italics}})} disabled={this.state.english.length === 0}>\n\t              Submit\n\t              </button>\n\t            )}\n             </Mutation>\n\t      </header>\n\t    </div>\n\t  );\n  \t}\n}\n\nexport default WordEdit;","import React from \"react\";\n\nconst ProgressBar = (props) => {\n  const { bgcolor, completed } = props;\n\n  const containerStyles = {\n    height: 20,\n    width: '100%',\n    backgroundColor: \"#e0e0de\",\n    borderRadius: 50\n  }\n\n  const fillerStyles = {\n    height: '100%',\n    width: `${completed}%`,\n    backgroundColor: bgcolor,\n    borderRadius: 'inherit',\n    textAlign: 'right'\n  }\n\n  return (\n    <div style={containerStyles}>\n      <div style={fillerStyles}>\n      </div>\n    </div>\n  );\n};\n\nexport default ProgressBar;","import React, { Component } from 'react'\nimport {Query, Mutation} from 'react-apollo';\nimport gql from 'graphql-tag';\nimport {getUserName} from '../constants.js'\nimport { Howl } from 'howler';\nimport ProgressBar from './ProgressBar'\n\n\nimport '../styles/App.css';\n\n\nconst MAKE_ATTEMPT = gql`\n  mutation makeAttempt($userName: String!, $sentenceId: Int!, $isCorrect: Boolean!, $alreadySeen: Boolean!, $nextIntervalSentenceId: Int) {\n\tmakeClozeAttempt(userName: $userName, sentenceId: $sentenceId, isCorrect: $isCorrect,alreadySeen: $alreadySeen, nextIntervalSentenceId: $nextIntervalSentenceId)\n  }\n\n`\n\n\nconst GET_SENTENCE = gql`\n  query getSentence($userName: String!) {\n\tgetNextSentence(userName: $userName) {\n\t\t_id\n    time_fetched\n\t\tnext_interval_sentence_id\n\t\traw_text\n\t\tdisplay_text\n    clean_text\n\t\tpinyin\n\t\tenglish\n    italics\n    interval{\n      interval_order\n    }\n    current_users{\n      user_name\n    }\n    already_seen\n\t\tword_taught{\n      word_id\n\t\t\ttext\n\t\t\tenglish\n      pinyin\n\t\t\tcharacters{\n\t\t\t\ttext\n\t\t\t\tenglish\n\t\t\t}\n\t\t}\n\n\t}\n  getCurrentProgress(userName: $userName){\n    words_learned\n    intervals_completed\n    total_word_count\n  }\n\n  }\n\n`\n\nclass Play extends Component {\n\tconstructor(){\n    super()\n    this.state = {\n    \tshowAnswer: false,\n      showCharacterDefinitions: false,\n    \tuserResponse: '',\n      isCorrect: true,\n      lastSentenceId: null,\n      audio: null,\n      timeFetched: null\n    }\n  }\n\n  componentDidMount() {\n    //if user is not logged in create temporary user\n\n  }\n\n\tcheckAnswer(correct_response) {\n\t\treturn correct_response === this.state.userResponse\n\t}\n\n  setAudio(alreadySeen, sentenceId, wordId) {\n    var Sounds\n    if(alreadySeen){\n        Sounds = new Howl({\n          src: [\"/audio/sentences/\" + sentenceId + \".m4a\"]\n        })\n    } else {\n        Sounds = new Howl({\n          src: [\"/audio/words/\" + wordId + \".m4a\"]\n        })\n    }\n    return Sounds\n  }\n\n  playSound(){\n    if(this.state.audio){\n        this.state.audio.play()\n    }\n  }\n\n  getFontColor(){\n    var color = 'black'\n    if(this.state.showAnswer){\n      color = this.state.isCorrect ? 'green' : 'grey'\n    }\n    return color\n  }\n\n  submitAnswer(makeAttempt, refetch, userName, sentenceId,time_fetched, isCorrect, alreadySeenWord, nextIntervalSentenceId){\n    if(!this.state.showAnswer){\n      makeAttempt({variables:{\n        userName: userName,\n        sentenceId: sentenceId,\n        isCorrect: isCorrect,\n        alreadySeen: alreadySeenWord,\n        nextIntervalSentenceId: nextIntervalSentenceId\n      }})\n    } else{\n      this.setState({\n          showAnswer: false,\n          userResponse: '',\n          timeFetched: time_fetched,\n          showCharacterDefinitions: false,\n          audio: null\n      }, () => {\n        refetch()\n      })\n    }\n  }\n\n  getText(text){\n    return(\n      <div style={{display: \"flex\", flexDirectioion: \"row\", justifyContent: \"center\"}}>\n      <p>{text.english}</p> <i style={{\"marginBlockStart\": \"1em\"}}>{text.italics}</i>\n      </div>\n      )\n  }\n\n\trender() {\n\t  const userName = getUserName()\n\t  return (\n\t    <div className=\"App\">\n\t      <header className=\"App-header\">\n\t      <Query query={GET_SENTENCE} variables={{userName: userName}}>\n\t      \t{({ loading, error, data, refetch }) => {\n\t      \t  if (loading) return <div>Fetching</div>\n            if (error) return <div>error</div>\n            //Don't rerender when waiting for refetch\n            if (this.state.timeFetched === data.getNextSentence.time_fetched)  return <div/>\n            if(data.getNextSentence){\n              const sentenceId = parseInt(data.getNextSentence._id)\n              const alreadySeenWord = data.getNextSentence.already_seen\n              var nextIntervalSentenceId = null\n              if(data.getNextSentence.next_interval_sentence_id && alreadySeenWord){\n                nextIntervalSentenceId = data.getNextSentence.next_interval_sentence_id\n              } \n              /* TESTING purposes only\n              else if((data.getNextSentence.next_interval_sentence_id || data.getNextSentence.interval.interval_order < 3) && !alreadySeenWord){\n                nextIntervalSentenceId = parseInt(sentenceId)\n              }*/\n                return(\n                  <div style={{width: \"50%\"}}>\n                    <p>{\"Words Learned: \" + data.getCurrentProgress.words_learned + \"/\" + data.getCurrentProgress.total_word_count}</p>\n                    <p>{\"Cards Completed: \" + data.getCurrentProgress.intervals_completed}</p>\n                   <ProgressBar bgcolor={\"rgb(245 109 109)\"} completed={(data.getCurrentProgress.intervals_completed / (data.getCurrentProgress.total_word_count * 7)) * 100}  />\n                  <div>\n                    {this.state.showAnswer && <button onClick={() => this.playSound(alreadySeenWord, data.getNextSentence._id, data.getNextSentence.word_taught.word_id)}>play</button>}\n                    {this.state.showAnswer && data.getNextSentence.word_taught.characters.length > 0 && <button onClick={() => this.setState(prevState => ({showCharacterDefinitions: !prevState.showCharacterDefinitions}))}>Character Definitions</button>}\n                    {this.state.showCharacterDefinitions && \n                       data.getNextSentence.word_taught.characters.map(char => \n                            <div>\n                            <p>{char.text}</p>\n                            <p>{char.english}</p>\n                            </div>\n                    )}\n                     <div style={{display: \"flex\", flexDirectioion: \"row\", justifyContent: \"center\"}}>\n                     {alreadySeenWord ? this.getText(data.getNextSentence) : this.getText(data.getNextSentence.word_taught)}\n                      {this.state.showAnswer && <div style={{display: \"flex\", flexDirectioion: \"row\", justifyContent: \"center\"}}><p>{\"|-----------|\"}</p> <p>{alreadySeenWord ? data.getNextSentence.pinyin : data.getNextSentence.word_taught.pinyin}</p></div>}\n                      </div>\n                     <Mutation mutation={MAKE_ATTEMPT}\n                          update={(store) => {\n                            if(!this.state.showAnswer){\n                              this.setState({\n                              showAnswer: true,\n                              showCharacterDefinitions: false,\n                              userResponse: data.getNextSentence.word_taught.text,\n                              isCorrect: this.checkAnswer(data.getNextSentence.word_taught.text),\n                              audio: this.setAudio(alreadySeenWord, data.getNextSentence._id, data.getNextSentence.word_taught.word_id)\n                              }, () => {this.playSound()})\n                            }\n\n                            }\n                          }\n                         >\n                          {makeAttempt => (\n                            <div style={{display: \"flex\", flexDirectioion: \"row\", justifyContent: \"center\"}}>\n                            {alreadySeenWord && <p>{data.getNextSentence.display_text.substr(0,data.getNextSentence.display_text.indexOf('#'))}</p>}\n                            <input style={{width: `${data.getNextSentence.word_taught.text.length * 25}px`,fontSize: \"calc(10px + 2vmin)\", margin: \"15px 5px 15px 5px\", color: this.getFontColor()}} value={this.state.userResponse} onChange={e => this.setState({ userResponse: e.target.value })}\n                            onKeyDown={(e) => {\n                              if (e.key === 'Enter') {\n                                this.submitAnswer(makeAttempt, refetch,userName, sentenceId, data.getNextSentence.time_fetched, this.checkAnswer(data.getNextSentence.word_taught.text), alreadySeenWord, nextIntervalSentenceId)\n                              }\n                            }}\n                            />\n                            {alreadySeenWord && <p>{data.getNextSentence.display_text.substr(data.getNextSentence.display_text.indexOf('#') + 1,data.getNextSentence.display_text.length)}</p>}\n                            <button\n                              style={{margin: \"15px 5px 15px 5px\"}}\n                              onClick={() => \n                                {\n                                  this.submitAnswer(makeAttempt, refetch,userName, sentenceId, data.getNextSentence.time_fetched, this.checkAnswer(data.getNextSentence.word_taught.text), alreadySeenWord, nextIntervalSentenceId)\n                                }\n                              }\n                            >\n                            {this.state.showAnswer ? \">\" : \">\"}\n                            </button>\n                            </div>\n                          )}\n                    </Mutation>\n                  </div>\n                  <div>\n                    <p style={{fontSize: \"12px\"}}>{alreadySeenWord && (data.getNextSentence.clean_text !== data.getNextSentence.word_taught.text) && data.getNextSentence.word_taught.english}</p>\n                  </div>\n                  {this.state.showAnswer && alreadySeenWord && (\n                      <div>\n                        <div style={{display: \"flex\", flexDirectioion: \"row\", justifyContent: \"center\"}}>\n                        <p>{data.getNextSentence.word_taught.text}</p>\n                        <p style={{marginLeft: \"5px\"}}>{data.getNextSentence.word_taught.pinyin}</p>\n                        </div>\n                      </div>\n                  )} \n              </div>\n            ) \n\t       }\n          else return <div>Complete</div>\n         }}\n\t      </Query>\n\t      </header>\n\t    </div>\n\t  );\t\t\n\n\t}\n}\n\nexport default Play;","import React, { Component } from 'react'\nimport '../styles/App.css';\n\nclass Home extends Component {\n\trender(){\n\t  return (\n\t    <div className=\"App\">\n\t      <header className=\"App-header\">\n\t        <p>HOME</p>\n\t      </header>\n\t    </div>\n\t  );\n  \t}\n}\n\nexport default Home;","import React, { Component } from 'react'\nimport { Switch, Route } from 'react-router-dom'\nimport Login from './Login'\nimport Header from './Header'\nimport Author from './Author'\nimport Editor from './Editor'\nimport Words from './Words'\nimport WordEdit from './WordEdit'\nimport Play from './Play'\nimport Home from './Home'\nimport {getRole} from '../constants.js'\n\nclass App extends Component {\n  render() {\n      return(\n    <div>\n      <Header />\n      <div>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          {getRole() === 'ADMIN' && (<Route exact path=\"/author\" component={Author} />)}\n          {getRole() === 'ADMIN' && (<Route exact path=\"/editor\" component={Editor} />)}\n          {getRole() === 'ADMIN' && (<Route exact path=\"/words\" component={Words} />)}\n          {getRole() === 'ADMIN' && (<Route exact path=\"/wordedit\" component={WordEdit} />)}\n          <Route exact path=\"/play\" component={Play} />\n          <Route exact path=\"/login\" component={Login} />\n        </Switch>\n      </div>\n    </div>\n    )\n  }\n\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles/index.css'\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker';\nimport { ApolloProvider } from 'react-apollo'\nimport { ApolloClient } from 'apollo-client'\nimport { createHttpLink } from 'apollo-link-http'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { BrowserRouter } from 'react-router-dom'\nimport { setContext } from 'apollo-link-context'\nimport { getToken } from './constants'\n\n\nconst httpLink = createHttpLink({\n  uri: ''\n})\n\n\nconst authLink = setContext((_, { headers }) => {\n  const token = getToken()\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : ''\n    }\n  }\n})\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache()\n})\n\nReactDOM.render(\n  <BrowserRouter>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </BrowserRouter>,\n  document.getElementById('root')\n)\nserviceWorker.unregister();\n\n"],"sourceRoot":""}