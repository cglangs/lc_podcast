{"version":3,"sources":["components/Login.js","utils.js","components/Header.js","constants.js","components/Switch.js","components/Author.js","components/Editor.js","components/Words.js","components/WordEdit.js","components/ProgressBar.js","components/Modal.js","components/Play.js","components/About.js","components/App.js","serviceWorker.js","index.js"],"names":["SIGNUP_MUTATION","gql","UPGRADE_MUTATION","LOGIN_MUTATION","Login","state","isLogin","email","password","user_name","userId","role","this","props","user","_id","setUserInfo","parseInt","setState","className","value","onChange","e","target","type","placeholder","mutation","variables","onCompleted","data","_confirm","onError","error","console","log","message","loading","onClick","handleLogin","disabled","length","substring","lastIndexOf","event","preventDefault","history","push","window","location","reload","Component","withRouter","getCookie","cname","name","ca","decodeURIComponent","document","cookie","split","i","c","charAt","indexOf","Header","isLoggedIn","to","punctuations","id","text","colors","times_used","color","Switch","isOn","handleToggle","checked","style","background","htmlFor","GET_LEVEL_WORDS","ADD_SENTENCE","REPLACE_SENTENCE","customStyles","option","styles","backgroundColor","Author","baseState","SentenceElements","formerSentenceRawText","formerSentenceCleanText","selectedWordId","wordToTeach","word_id","containsWordToTeach","points","punctuationMode","selectedPunctuationId","pinyin","english","italics","replaceMode","interval","sentenceElements","level","interval_order","addable_words","teachable_words","clean_sentences","words_left","addSentence","sentenceWords","filter","element","hasOwnProperty","sentenceWordListSimplified","map","word","cleanSentenceTextSimplified","join","includes","alert","getSentenceVariables","sentenceContainedWordListSimplified","rawSentenceTextSimplified","displaySentenceTextSimplified","replace","RegExp","cleanSentenceTextTraditional","alt_text","rawSentenceTextTraditional","displaySentenceTextTraditional","shouldCall","resultObj","wordToTeachText","wordToTeachId","currentInterval","Object","assign","newElement","prevState","slice","minimum_usage","max_usage","find","colorType","query","refetch","wordArray","get_word_array","min_length","max_length","fontSize","popElement","bind","hidden","label","mark","options","appendElement","getColor","width","update","store","submitSentenceData","sentences","sentence","clean_text","GET_DROPDOWNS","GET_SENTENCE_LIST","Editor","selectedLevel","selectedInterval","userName","getIntervalsAndLevels","levels","selected","intervals","current_index","display_text_copy","display_text","words_contained","sort","previous","next","contains_order","word_taught","Word","pathname","raw_text","levelNumber","intervalOrder","getDropdowns","getSentenceList","parseSentence","GET_WORDS","Words","word_list","Level","all_words","level_number","editWord","EDIT_WORD","WordEdit","ProgressBar","bgcolor","completed","fillerStyles","height","borderRadius","textAlign","Modal","handleClose","show","characters","showHideClassName","char","MAKE_ATTEMPT","CREATE_USER","GET_SENTENCE","Play","showModal","showCharacterDefinitions","hideModal","a","refetchUser","showAnswer","isSubmitted","userResponse","isCorrect","audio","timeFetched","lastSentence","prevProps","correct_response","Howl","src","play","makeAttempt","sentenceId","correctResponse","time_fetched","playSound","display","flexDirectioion","justifyContent","nextSentence","getNextSentence","getCurrentProgress","words_learned","total_word_count","intervals_completed","flexDirection","getText","refetchQueries","checkAnswer","setAudio","substr","margin","getFontColor","onKeyDown","key","submitAnswer","marginLeft","playDashboard","createUser","About","GET_USER","App","me","exact","path","render","component","Boolean","hostname","match","httpLink","createHttpLink","uri","credentials","client","ApolloClient","link","cache","InMemoryCache","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.c5afbc61.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport gql from 'graphql-tag'\nimport { Mutation} from 'react-apollo'\nimport { withRouter } from 'react-router-dom';\n\n\nconst SIGNUP_MUTATION = gql`\n  mutation SignupMutation($email: String!, $password: String!, $user_name: String!) {\n    CreatePermanentUser(email: $email, password: $password, user_name: $user_name) {\n      _id\n      user_name\n      password\n      token\n      role\n    }\n  }\n`\nconst UPGRADE_MUTATION = gql`\n  mutation UpgradeMutation($email: String!, $password: String!, $user_name: String!, $userId: Int!) {\n    UpgradeUser(email: $email, password: $password, user_name: $user_name, userId: $userId) {\n      _id\n      user_name\n      password\n      token\n      role\n    }\n  }\n`\n\nconst LOGIN_MUTATION = gql`\n  mutation LoginMutation($email: String!, $password: String!) {\n    Login(email: $email, password: $password) {\n      _id\n      user_name\n      password\n      token\n      role\n    }\n  }\n`\n\nclass Login extends Component {\n  state = {\n    isLogin: true, // switch between Login and SignUp\n    email: '',\n    password: '',\n    user_name: '',\n    userId: null,\n    role: \"STUDENT\"\n  }\n\n  componentDidMount(){\n    if(this.props.user){\n      const {user_name, _id ,role} = this.props.user\n      this.setUserInfo(user_name, parseInt(_id), role)\n    }\n  }\n\n  setUserInfo(user_name, userId, role){\n    this.setState({user_name, userId: userId, role: role})\n\n  }\n\n render() {\n    const { isLogin, email, password, user_name, userId, role} = this.state\n    return (\n    <div>\n      <h4>{isLogin ? 'Login' : 'Sign Up'}</h4>\n\n      <div className=\"flex flex-column\">\n        {!isLogin && (\n          <input\n            value={user_name}\n            onChange={e => this.setState({ user_name: e.target.value })}\n            type=\"text\"\n            placeholder=\"Your name\"\n          />\n        )}\n        <input\n          value={email}\n          onChange={e => this.setState({ email: e.target.value })}\n          type=\"text\"\n          placeholder=\"Your email address\"\n        />\n        <input\n          value={password}\n          onChange={e => this.setState({ password: e.target.value })}\n          type=\"password\"\n          placeholder=\"Choose a safe password\"\n        />\n      </div>\n      <div>\n      <Mutation\n        mutation={isLogin ? LOGIN_MUTATION : role === 'TESTER' ? UPGRADE_MUTATION : SIGNUP_MUTATION}\n        variables={{ email, password, user_name, userId}}\n        onCompleted={data => this._confirm()}\n        onError={(error) => console.log(error.message)}\n      >\n        {(mutation, { loading, error }) => (\n          <div>\n            <button\n              type=\"button\"\n              onClick={e => this.handleLogin(e, mutation)}\n              disabled={!this.state.email.length || !this.state.password.length || (!this.state.user_name.length && !this.state.isLogin)}\n            >\n              {isLogin ? 'login' : 'create account'}\n            </button>\n            <button\n              type=\"button\"\n              onClick={() => this.setState({ isLogin: !this.state.isLogin })}\n            >\n            {isLogin ? 'need to create an account?' : 'already have an account?'}\n\n            </button>\n            {error && <p>{error.message.substring(error.message.lastIndexOf(':') + 1)}</p>}\n          </div>\n        )}\n      </Mutation>\n      </div>\n    </div>\n  )\n\n }\n\n\n handleLogin(event, mutation){\n  event.preventDefault()\n  mutation()\n}\n\n _confirm() {\n  //this.props.refetchUser()\n  this.props.history.push('/')\n  window.location.reload(true);\n}\n\n\n}\n\n\nexport default withRouter(Login)","export const getCookie = (cname) => {\n  var name = cname + \"=\";\n  var decodedCookie = decodeURIComponent(document.cookie);\n  var ca = decodedCookie.split(';');\n  for(var i = 0; i <ca.length; i++) {\n    var c = ca[i];\n    while (c.charAt(0) === ' ') {\n      c = c.substring(1);\n    }\n    if (c.indexOf(name) === 0) {\n      return c.substring(name.length, c.length);\n    }\n  }\n  return \"\";\n}","import React, { Component } from 'react'\nimport { withRouter } from 'react-router'\nimport { Link } from 'react-router-dom'\nimport { getCookie} from '../utils'\n\nclass Header extends Component {\n\n  render() {\n    const isLoggedIn = !!getCookie('access-token');\n\n    return (\n      <div>\n        <div>Chinese App</div>\n        <Link to=\"/\">\n            play\n          </Link>\n          <div>\n        {isLoggedIn && this.props.user && this.props.user.role === 'ADMIN' && (\n          <div>\n            <div className=\"flex\">\n              <Link to=\"/author\">\n                author\n              </Link>\n            </div>\n            <div className=\"flex\">\n              <Link to=\"/editor\">\n                editor\n              </Link>\n            </div>\n            <div className=\"flex\">\n              <Link to=\"/words\">\n                words\n              </Link>\n            </div>\n          </div>\n          )}\n          </div>  \n        <Link to=\"/about\">\n            about\n        </Link>\n        <div className=\"flex flex-fixed\">\n          {isLoggedIn && this.props.user && this.props.user.role !== 'TESTER' ? (\n            <div\n              onClick={() => {\n                document.cookie = \"access-token=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;\";\n                document.cookie = \"refresh-token=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;\";\n                this.props.history.push('/')\n                window.location.reload(true);\n\n                //this.props.refetchUser()\n              }}\n            >\n              logout\n            </div>\n          ) : (\n            <Link to=\"/login\">\n              login\n            </Link>\n          )}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default withRouter(Header)","export const punctuations = [\n\t{id: 1, text: '，', type: 'COMMA'},\n\t{id: 2, text: '。', type: 'PERIOD'},\n\t{id: 3, text: '”', type: 'QUOTE'},\n\t{id: 4, text: '！', type: 'EXCLAMATION'},\n\t{id: 5, text: '？', type: 'QUESTION'},\n\t{id: 6, text: '：', type: 'COLON'},\n\t{id: 7, text: '0', type: 'ZERO'},\n\t{id: 8, text: '1', type: 'ONE'},\n\t{id: 9, text: '2', type: 'TWO'},\n\t{id: 10, text: '3', type: 'THREE'},\n\t{id: 11, text: '4', type: 'FOUR'},\n\t{id: 12, text: '5', type: 'FIVE'},\n\t{id: 13, text: '6', type: 'SIX'},\n\t{id: 14, text: '7', type: 'SEVEN'},\n\t{id: 15, text: '8', type: 'EIGHT'},\n\t{id: 16, text: '9', type: 'NINE'},\n\t{id: 17, text: ' ', type: 'SPACE'},\n\t{id: 18, text: 'Smith', type: 'NAME'}\n]\n\nexport const colors = [\n\t{times_used: 0, color: 'lightblue'},\n\t{times_used: 1, color: 'pink'},\n\t{times_used: 2, color: 'yellow'},\n\t{times_used: 3, color: 'lightgreen'},\n\t{times_used: 4, color: 'coral'},\n\t{times_used: 5, color: 'blueviolet'}\n]","import React from 'react';\nimport '../styles/Switch.css';\n\nconst Switch = ({ isOn, handleToggle }) => {\n  return (\n    <>\n      <input\n        checked={isOn}\n        onChange={handleToggle}\n        className=\"react-switch-checkbox\"\n        id={`react-switch-new`}\n        type=\"checkbox\"\n      />\n      <label\n        style={{ background: isOn && '#06D6A0' }}\n        className=\"react-switch-label\"\n        htmlFor={`react-switch-new`}\n      >\n        <span className={`react-switch-button`} />\n      </label>\n    </>\n  );\n};\n\nexport default Switch;","import React, { Component } from 'react'\nimport gql from 'graphql-tag';\nimport { Mutation, Query} from 'react-apollo';\nimport '../styles/App.css';\nimport {punctuations, colors} from '../constants.js'\nimport Switch from \"./Switch\";\nimport Select from \"react-select\";\n\n\nexport const GET_LEVEL_WORDS = gql`\n  query GetLevelWords{\n  Author{\n    level{\n      level_number\n      points\n      minimum_usage\n      teachable_words{\n        text\n        alt_text\n        word_id\n        level{\n          points\n        }\n      }\n      addable_words{\n        text\n        alt_text\n        word_id\n        times_used\n        level{\n          points\n        }\n      }\n    }\n    interval{\n      sentences{\n        clean_text\n      }\n      interval_order\n      seconds\n      min_length\n      max_length\n    }\n  }\n}\n`\n\nconst ADD_SENTENCE = gql`\n  mutation addsentence($rawSentenceTextSimplified: String!, $cleanSentenceTextSimplified: String!, $displaySentenceTextSimplified: String!,$rawSentenceTextTraditional: String!, $cleanSentenceTextTraditional: String!, $displaySentenceTextTraditional: String!, $pinyin: String!, $english: String!, $italics: String!, $wordToTeachId: Int!, $sentenceContainedWordListSimplified: [String!], $currentInterval: Int!, $shouldCall: Boolean!) {\n    CreateSentence(raw_text: $rawSentenceTextSimplified, clean_text: $cleanSentenceTextSimplified, display_text: $displaySentenceTextSimplified, alt_raw_text: $rawSentenceTextTraditional, alt_clean_text: $cleanSentenceTextTraditional, alt_display_text: $displaySentenceTextTraditional, pinyin: $pinyin, english: $english, italics: $italics) {\n      raw_text\n    }\n    AddSentenceLevel(from: {raw_text:  $rawSentenceTextSimplified} to: {level_number: 1}){\n      from {raw_text}\n      to {level_number}\n    }\n    AddSentenceWord_taught(from: {raw_text: $rawSentenceTextSimplified} to: {word_id: $wordToTeachId}){\n      from {raw_text}\n      to {text}\n    }\n    AddSentenceInterval(from: {raw_text: $rawSentenceTextSimplified} to: {interval_order: $currentInterval}){\n      from {raw_text}\n      to {interval_order}\n    }\n    AddSentenceDependencies(src_sentence: $rawSentenceTextSimplified, dest_words: $sentenceContainedWordListSimplified){\n      raw_text\n      display_text\n    }\n    IncrementInterval(should_call: $shouldCall)\n  }\n\n`\n\nconst REPLACE_SENTENCE = gql`\n  mutation replacesentence($rawSentenceTextSimplified: String!, $cleanSentenceTextSimplified: String!, $displaySentenceTextSimplified: String!,$rawSentenceTextTraditional: String!, $cleanSentenceTextTraditional: String!, $displaySentenceTextTraditional: String!, $pinyin: String!, $english: String!, $italics: String! $wordToTeachId: Int!, $sentenceContainedWordListSimplified: [String!], $currentInterval: Int!, $formerSentenceRawText: String!) {\n    DeleteSentence(raw_text: $formerSentenceRawText){\n      raw_text\n    }\n    CreateSentence(raw_text: $rawSentenceTextSimplified, clean_text: $cleanSentenceTextSimplified, display_text: $displaySentenceTextSimplified, alt_raw_text: $rawSentenceTextTraditional, alt_clean_text: $cleanSentenceTextTraditional, alt_display_text: $displaySentenceTextTraditional, pinyin: $pinyin, english: $english,, italics: $italics) {\n      raw_text\n    }\n    AddSentenceLevel(from: {raw_text:  $rawSentenceTextSimplified} to: {level_number: 1}){\n      from {raw_text}\n      to {level_number}\n    }\n    AddSentenceWord_taught(from: {raw_text: $rawSentenceTextSimplified} to: {word_id: $wordToTeachId}){\n      from {raw_text}\n      to {text}\n    }\n    AddSentenceInterval(from: {raw_text: $rawSentenceTextSimplified} to: {interval_order: $currentInterval}){\n      from {raw_text}\n      to {interval_order}\n    }\n    AddSentenceDependencies(src_sentence: $rawSentenceTextSimplified, dest_words: $sentenceContainedWordListSimplified){\n      raw_text\n      display_text\n    }\n  }\n\n`\nconst customStyles = {\n\n  option: (styles, { data}) => {\n    return {\n      ...styles,\n      color: \"black\",\n      backgroundColor: data.color\n    }\n  }\n\n}\n\nclass Author extends Component {\n  constructor(props){\n    super(props)\n    this.baseState = {\n        SentenceElements: [],\n        formerSentenceRawText: null,\n        formerSentenceCleanText: null,\n        selectedWordId: null,\n        wordToTeach: {text: '', word_id: null},\n        containsWordToTeach: 0,\n        points: 0,\n        punctuationMode: false,\n        selectedPunctuationId: null,\n        pinyin: '',\n        english: '',\n        italics: '',\n        replaceMode: false,\n        interval: null\n      }\n    if(typeof props.location.state === 'undefined'){\n      this.state = this.baseState\n    } else {\n        this.state = {\n          SentenceElements: props.location.state.sentenceElements,\n          formerSentenceRawText: props.location.state.formerSentenceRawText,\n          formerSentenceCleanText: props.location.state.formerSentenceCleanText,\n          selectedWordId: null,\n          wordToTeach: props.location.state.wordToTeach,\n          containsWordToTeach: props.location.state.containsWordToTeach,\n          points: props.location.state.points,\n          punctuationMode: false,\n          selectedPunctuationId: null,\n          pinyin: props.location.state.pinyin,\n          english: props.location.state.english,\n          italics: props.location.state.italics,\n          interval: props.location.state.interval,\n          replaceMode: true\n        }\n      }\n  }\n\n  get_word_array(level, interval_order) {\n    let arr = []\n    const wordToTeach = this.state.wordToTeach\n    if(wordToTeach && wordToTeach.text.length && interval_order === 1){\n        arr = [wordToTeach, ...level.addable_words]\n      } else if (wordToTeach && wordToTeach.text.length && interval_order > 1){\n          arr = level.addable_words\n      } else{\n        arr = level.teachable_words\n      }\n    return arr\n  }\n\n\n  submitSentenceData(clean_sentences, interval_order, words_left, addSentence){\n    const SentenceElements = this.state.SentenceElements\n    const sentenceWords = SentenceElements.filter( element => element.hasOwnProperty('word_id') )\n    const sentenceWordListSimplified = sentenceWords.map(word => word.text)\n    const cleanSentenceTextSimplified = sentenceWordListSimplified.join('')\n\n    if(clean_sentences.includes(cleanSentenceTextSimplified) && cleanSentenceTextSimplified !== this.state.formerSentenceCleanText){\n      alert(\"Already used this sentence. Please change it.\")\n    }\n    else{\n        addSentence({ variables: this.getSentenceVariables(SentenceElements, sentenceWords,sentenceWordListSimplified,cleanSentenceTextSimplified, interval_order, words_left)})\n    }\n  }\n\n  getSentenceVariables(SentenceElements, sentenceWords, sentenceWordListSimplified,cleanSentenceTextSimplified, interval_order, words_left) {\n    const { wordToTeach, pinyin, english, italics, formerSentenceRawText, replaceMode} = this.state\n\n    const sentenceContainedWordListSimplified = sentenceWordListSimplified.filter(word => word !== wordToTeach.text)\n    const SentenceElementListSimplified = SentenceElements.map(element => element.text)\n    const rawSentenceTextSimplified = SentenceElementListSimplified.join('')\n    const displaySentenceTextSimplified = rawSentenceTextSimplified.replace(new RegExp(wordToTeach.text, 'g'), '#')\n\n    const sentenceWordListTraditional = sentenceWords.map(word => word.alt_text)\n    const cleanSentenceTextTraditional = sentenceWordListTraditional.join('')\n    const SentenceElementListTraditional = SentenceElements.map(element => element.alt_text || element.text)\n    const rawSentenceTextTraditional = SentenceElementListTraditional.join('')\n    const displaySentenceTextTraditional = rawSentenceTextTraditional.replace(new RegExp(wordToTeach.alt_text, 'g'), '#')\n\n    const wordToTeachText = wordToTeach.text\n    const wordToTeachId = wordToTeach.word_id\n    const currentInterval = interval_order\n    const shouldCall =  words_left === 1 && currentInterval < 5\n\n    var resultObj ={rawSentenceTextSimplified,cleanSentenceTextSimplified, displaySentenceTextSimplified,rawSentenceTextTraditional,cleanSentenceTextTraditional, displaySentenceTextTraditional, pinyin, english, italics, wordToTeachText,wordToTeachId,sentenceContainedWordListSimplified,currentInterval}\n\n    if(replaceMode){\n      Object.assign(resultObj,{formerSentenceRawText})\n    } else{\n      Object.assign(resultObj,{shouldCall})\n    }\n\n    return resultObj\n  }\n\n  appendElement(newElement) {\n    if(!newElement.hasOwnProperty('word_id')){\n      this.setState(prevState => \n      ({\n        SentenceElements: [...prevState.SentenceElements, newElement]\n      })) \n    } else {\n      this.setState(prevState => \n        ({\n          points: prevState.points + newElement.level.points, \n          containsWordToTeach: newElement.word_id === this.state.wordToTeach.word_id ? prevState.containsWordToTeach + 1 : prevState.containsWordToTeach,\n          SentenceElements: [...prevState.SentenceElements, newElement]\n        }))\n    }\n  }\n\n  popElement() {\n    if(!this.state.SentenceElements[this.state.SentenceElements.length - 1].hasOwnProperty('word_id')){\n     this.setState(prevState => \n      ({\n        SentenceElements: prevState.SentenceElements.slice(0,-1)\n      }))     \n    } else {\n    this.setState(prevState => \n      ({\n        points: prevState.points - prevState.SentenceElements[prevState.SentenceElements.length - 1].level.points, \n        containsWordToTeach: prevState.SentenceElements[prevState.SentenceElements.length - 1].word_id === this.state.wordToTeach.word_id ? prevState.containsWordToTeach - 1 : prevState.containsWordToTeach,\n        SentenceElements: prevState.SentenceElements.slice(0,-1)\n      }))\n    }\n  }\n\n  getColor(word, minimum_usage){\n    var color = 'white'\n    const max_usage = minimum_usage + 5\n    if(word.hasOwnProperty('times_used')){\n      color = colors.find((colorType) => colorType.times_used + minimum_usage === parseInt(word.times_used) || (colorType.times_used === 5 && parseInt(word.times_used) >= max_usage)).color\n    }\n    return color\n  }\n\n  render() {\n    const { SentenceElements, wordToTeach, points, selectedWordId, containsWordToTeach, punctuationMode,selectedPunctuationId} = this.state\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Query query={GET_LEVEL_WORDS}>\n          {({ loading, error, data, refetch }) => {\n              if (loading) return <div>Fetching</div>\n              if (error) return <div>Error</div>\n              const interval = this.state.interval || data.Author[0].interval\n              const wordArray = this.get_word_array(data.Author[0].level, interval.interval_order)\n              const minimum_usage = parseInt(data.Author[0].level.minimum_usage)\n               return (\n                <div>\n                <div className=\"Author-dashboard\">\n                  <p>{\"Interval: \" + interval.interval_order}</p>\n                  <p>{\"Minimum points: \" + interval.min_length}</p>\n                  <p>{\"Maximum points:: \" + interval.max_length}</p>\n                  <p>{\"Current Points: \" + points}</p>\n                </div>\n                <p>Word being learned: {wordToTeach.text}</p>\n                <div>\n                <p style={{fontSize: \"30px\"}}>{SentenceElements.length ?  SentenceElements.map(word => word.text).join('') : null}</p>\n               <button\n                onClick={this.popElement.bind(this)}\n                hidden={SentenceElements.length === 0}\n                >\n                Backspace\n                </button>\n                </div>\n                <Switch isOn={punctuationMode} handleToggle={() => \n                  this.setState(prevState => ({punctuationMode: !prevState.punctuationMode}))} />\n                  {punctuationMode ?\n                    (\n                      <div>\n                    <Select\n                    styles={customStyles}\n                    value={{value: selectedPunctuationId, label: selectedPunctuationId && punctuations.find(mark=> mark.id === selectedPunctuationId).text}}\n                    options={punctuations.map(mark =>  { return { label: mark.text, value: mark.id}})}\n                    onChange={option => this.setState({selectedPunctuationId: parseInt(option.value)})}>\n                    </Select>    \n                   <button onClick={() => this.appendElement(punctuations.find(mark=> mark.id === selectedPunctuationId))}>\n                    Add\n                    </button>\n                    </div>\n                  ) : (\n                    <div>\n                  <Select\n                    styles={customStyles}\n                    value={{value: selectedWordId, label: selectedWordId && wordArray.find(word=> word.word_id === selectedWordId).text}}\n                    options={wordArray.map(word =>  { return { label: word.text, value: word.word_id, color: this.getColor(word,minimum_usage)}})}\n                    onChange={option => this.setState({selectedWordId: parseInt(option.value)})}>\n                    </Select>                    \n                     <button\n                      onClick={wordToTeach.text.length ? () => this.appendElement(wordArray.find(word=> word.word_id === selectedWordId)) : \n                        () => {this.setState({wordToTeach: wordArray.find(word=> word.word_id === selectedWordId)})}}\n                      >\n                      {wordToTeach.text.length ? \"Add\" : \"Learn\"}\n                      </button>\n                    </div>\n                    )\n                }\n                  <div>\n                    <input\n                      value={this.state.pinyin}\n                      onChange={e => this.setState({ pinyin: e.target.value })}\n                      type=\"pinyin\"\n                      placeholder=\"Enter sentence's pinyin\"\n                      style={{width: \"250px\"}}\n                    />\n                  </div>\n                  <div>\n                    <input\n                      value={this.state.english}\n                      onChange={e => this.setState({ english: e.target.value })}\n                      type=\"english\"\n                      placeholder=\"Enter sentence's english translation\"\n                      style={{width: \"250px\"}}\n                    />\n                  </div>\n                  <div>\n                    <input\n                      value={this.state.italics}\n                      onChange={e => this.setState({ italics: e.target.value })}\n                      type=\"italics\"\n                      placeholder=\"Enter sentence's extra notes\"\n                      style={{width: \"250px\"}}\n                    />\n                  </div>\n                   <Mutation mutation={this.state.replaceMode ? REPLACE_SENTENCE : ADD_SENTENCE}\n                      update={(store) => {\n                        this.setState(this.baseState)\n                        refetch()                      \n                        }\n                      }\n                   >\n                        {addSentence => (\n                          <button\n                            onClick={() => \n                              {\n                                this.submitSentenceData(interval.sentences.map((sentence) => sentence.clean_text), interval.interval_order,data.Author[0].level.teachable_words.length, addSentence)\n                              }\n                          }\n                            disabled={!containsWordToTeach/* || points <  interval.min_length || points >  interval.max_length*/}\n                          >\n                          Submit\n                          </button>\n                        )}\n                    </Mutation>\n                    <div>\n                    <button onClick={() => this.setState(this.baseState) }>\n                    Clear Sentence\n                    </button>\n                    </div>\n                  </div>\n                  )\n                }}\n            </Query>\n        </header>\n        \n      </div>\n    \n    );\n  }\n}\n\nexport default Author;\n","import React, { Component } from 'react'\nimport {Query} from 'react-apollo';\nimport gql from 'graphql-tag';\n\nconst GET_DROPDOWNS = gql`\n  query getDropdowns($userName: String!) {\n\tgetIntervalsAndLevels(userName: $userName) {\n\t\tlevels\n\t\tintervals\n\t}\n  }\n`\n\nconst GET_SENTENCE_LIST = gql`\n  query getSentences($levelNumber: Int! $intervalOrder: Int!) {\n\tgetSentenceList(levelNumber: $levelNumber intervalOrder: $intervalOrder) {\n\t\traw_text\n\t\tclean_text\n\t\twords_contained{\n\t\t\tcontains_order\n\t\t\tWord{\n\t\t\t\tword_id\n\t\t\t\ttext\n\t\t\t\talt_text\n\t\t\t\tlevel{\n\t\t\t\t\tpoints\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tdisplay_text\n\t\tword_taught{\n\t\t\tword_id\n\t\t\ttext\n\t\t\talt_text\n\t\t\tlevel{\n\t\t\t\tpoints\n\t\t\t}\n\t\t}\n\t\tpinyin\n\t\tenglish\n\t\titalics\n\t\tinterval{\n\t        sentences{\n\t          clean_text\n\t        }\n\t\t\tinterval_order\n      \t\tseconds\n      \t\tmin_length\n      \t\tmax_length\n\t\t}\n\t}\n  }\n`\n\n\nclass Editor extends Component {\n\tstate = {\n      selectedLevel: 1,\n      selectedInterval: 1\n    }\n\n\n  getDropdowns(refetch){\n  \treturn (\n\t\t<Query query={GET_DROPDOWNS} variables={{userName: \"test\"}}>\n      \t{({ loading, error, data, refetch }) => {\n      \t  if (loading) return <div>Fetching</div>\n          if (error) return <div>Error</div>\n          return(\n          \t<div>\n          \tLevel: <select onChange={(e) => this.setState({selectedLevel: parseInt(e.target.value)})}>{data.getIntervalsAndLevels.levels.map((level) => <option value={level} selected={level === this.state.selectedLevel}>{level}</option>)}</select>\n          \tInterval: <select onChange={(e) => this.setState({selectedInterval: parseInt(e.target.value)})}>{data.getIntervalsAndLevels.intervals.map((interval) => <option value={interval} selected={interval === this.state.selectedInterval}>{interval}</option>)}</select>\n          \t</div>\n          )\n      \t}\n      }\n\t\t</Query>\n  \t)\n\n  }\n\n  parseSentence(sentence){\n  \tlet current_index = 0\n  \tlet sentenceElements = []\n  \tlet wordToTeach = null\n  \tlet containsWordToTeach = 0\n  \tlet points = 0\n  \tlet display_text_copy = sentence.display_text\n  \tconsole.log(sentence)\n  \tsentence.words_contained.sort((previous, next)=> {return previous.contains_order - next.contains_order})\n  \twhile(display_text_copy.length){\n  \t\tif(display_text_copy[0] === '#'){\n  \t\t\tsentenceElements.push({text: sentence.word_taught.text, alt_text: sentence.word_taught.alt_text, word_id: sentence.word_taught.word_id, level: {points: sentence.word_taught.level.points}})\n  \t\t\tif(wordToTeach === null){\n  \t\t\t\twordToTeach = {text: sentence.word_taught.text, alt_text: sentence.word_taught.alt_text, word_id: sentence.word_taught.word_id, level: {points: sentence.word_taught.level.points}}\n  \t\t\t}\n  \t\t\tdisplay_text_copy = display_text_copy.substring(1)\n  \t\t\tcontainsWordToTeach++\n  \t\t\tpoints += sentence.word_taught.level.points\n  \t\t} else if(sentence.words_contained[current_index] && sentence.words_contained[current_index].Word.text[0] === display_text_copy[0]){\n  \t\t\tconsole.log(sentence)\n  \t\t\tsentenceElements.push({ text: sentence.words_contained[current_index].Word.text, alt_text: sentence.words_contained[current_index].Word.alt_text, word_id: sentence.words_contained[current_index].Word.word_id, level: {points: sentence.words_contained[current_index].Word.level.points}})\n  \t\t\tdisplay_text_copy = display_text_copy.substring(sentence.words_contained[current_index].Word.text.length)\n  \t\t\tpoints += sentence.words_contained[current_index].Word.level.points\n  \t\t\tcurrent_index++\n  \t\t} else {\n  \t\t\t sentenceElements.push({text: display_text_copy[0]})\n  \t\t\t display_text_copy = display_text_copy.substring(1)\n  \t\t}\n  \t}\n\n\tthis.props.history.push({\n\t\tpathname: '/author',\n\t\tstate: {\n\t\t\tsentenceElements: sentenceElements, \n\t\t\tformerSentenceRawText: sentence.raw_text,\n\t\t\tformerSentenceCleanText: sentence.clean_text,\n\t\t\twordToTeach: wordToTeach,\n\t\t\tcontainsWordToTeach: containsWordToTeach,\n\t\t\tpinyin: sentence.pinyin,\n\t\t\tenglish: sentence.english,\n\t\t\titalics: sentence.italics,\n\t\t\tpoints: points,\n\t\t\tinterval: sentence.interval\n\t\t}  \n\t})\t\t\t\t\t\t\n  }\n\n\trender(){\n\t\treturn(\n\t    <div className=\"App\">\n\t      <header className=\"App-header\">\n\t\t      <Query query={GET_SENTENCE_LIST} variables={{levelNumber: this.state.selectedLevel, intervalOrder: this.state.selectedInterval}}>\n\t\t      \t{({ loading, error, data, refetch }) => {\n\t\t      \t  if (loading) return <div>Fetching</div>\n\t              if (error) return <div>Error</div>\n\t              return(\n\t              \t<div>\n\t              \t\t{this.getDropdowns()}\n\t              \t\t<table>\n\t              \t\t  <thead>\n\t\t\t\t\t\t    <tr>\n\t\t\t\t\t\t      <th>Sentence</th>\n\t\t\t\t\t\t      <th>Word Taught</th>\n\t\t\t\t\t\t      <th>Pinyin</th>\n\t\t\t\t\t\t      <th>Translation</th>\n\t\t\t\t\t\t      <th>Notes</th>\n\t\t\t\t\t\t    </tr>\n\t\t\t\t\t\t  </thead>\n\t              \t\t<tbody>\n\t              \t\t{data.getSentenceList.map(sentence => {\n\t              \t\t\treturn(\n\t\t              \t\t\t<tr>\n\t\t              \t\t\t <td>{sentence.raw_text}</td>\n\t\t              \t\t\t <td>{sentence.word_taught.text}</td>\n\t\t              \t\t\t <td>{sentence.pinyin}</td>\n\t\t              \t\t\t <td>{sentence.english}</td>\n\t\t              \t\t\t <td>{sentence.italics}</td>\n\t\t              \t\t\t <td><button onClick={() => this.parseSentence(sentence)}>Edit</button></td>\n\t\t              \t\t\t</tr>\n\t\t              \t\t)\n\t              \t\t})}\n\t              \t\t</tbody>\n\t              \t\t</table>\n\t              \t</div>\n\t              )\n\t          \t}\n\t          }\n\t\t\t\t</Query>\n\t\t\t</header>\n\t\t</div>\n\t\t)\n\t}\n\n\n\n}\n\nexport default Editor;","import React, { Component } from 'react'\nimport {Query} from 'react-apollo';\nimport gql from 'graphql-tag';\n\nconst GET_WORDS = gql`\n  query getWords {\n\tLevel {\n\t\tall_words{\n\t\t\tword_id\n\t\t\ttext\n\t\t\tpinyin\n\t\t\tenglish\n\t\t\titalics\n\t\t\ttimes_used\n\t\t\tlevel{\n\t\t\t\tlevel_number\n\t\t\t}\n\t\t}\n\t}\n  }\n`\n\n\nclass Words extends Component {\n\n\teditWord(word){\n\t\tthis.props.history.push({\n\t\t\tpathname: '/wordedit',\n\t\t\tstate: {\n\t\t\t\tword_id: word.word_id,\n\t\t\t\ttext: word.text,\n\t\t\t\tpinyin: word.pinyin,\n\t\t\t\tenglish: word.english,\n\t\t\t\titalics: word.italics\n\t\t\t}  \n\t\t})\n\t}\n\trender(){\n\t  return (\n\t    <div className=\"App\">\n\t      <header className=\"App-header\">\n\t\t      <Query query={GET_WORDS}>\n\t\t      \t{({ loading, error, data, refetch }) => {\n\t\t      \t  if (loading) return <div>Fetching</div>\n\t              if (error) return <div>error</div>\n\t              const word_list = data.Level[0].all_words\n\t              return(\n\t              \t\t <table>\n\t              \t\t  <thead>\n\t\t\t\t\t\t    <tr>\n\t\t\t\t\t\t      <th>Word</th>\n\t\t\t\t\t\t      <th>Pinyin</th>\n\t\t\t\t\t\t      <th>Translation</th>\n\t\t\t\t\t\t      <th>Notes</th>\n\t\t\t\t\t\t      <th>Times Used</th>\n\t\t\t\t\t\t      <th>Level</th>\n\t\t\t\t\t\t    </tr>\n\t\t\t\t\t\t  </thead>\n\t              \t\t<tbody>\n\t              \t\t{word_list.map(word => {\n\t              \t\t\treturn(\n\t\t              \t\t\t<tr>\n\t\t              \t\t\t <td>{word.text}</td>\n\t\t              \t\t\t <td>{word.pinyin}</td>\n\t\t              \t\t\t <td>{word.english}</td>\n\t\t              \t\t\t <td>{word.italics}</td>\n\t\t              \t\t\t <td>{word.times_used}</td>\n\t\t              \t\t\t <td>{word.level ? word.level.level_number : 0}</td>\n\t\t              \t\t\t <td><button onClick={() => this.editWord(word)}>Edit</button></td>\n\t\t              \t\t\t</tr>\n\t\t              \t\t)\n\t              \t\t})}\n\t              \t\t</tbody>\n\t              \t\t</table>\n\t              )\n\t          \t}\n\t      \t\t}\n\t          </Query>\n\t      </header>\n\t    </div>\n\t  );\n  \t}\n}\n\nexport default Words","import React, { Component } from 'react'\nimport { Mutation} from 'react-apollo';\nimport gql from 'graphql-tag';\nimport '../styles/App.css';\n\nconst EDIT_WORD = gql`\n  mutation editWord($word_id: Int!, $english: String, $italics: String) {\n  \tUpdateWord(word_id: $word_id, english: $english, italics: $italics){\n  \t\tword_id\n  \t\ttext\n  \t}\n  }\n`\n\nclass WordEdit extends Component {\n\tconstructor(props){\n    super(props)\n    this.state = {\n      word_id: props.location.state.word_id,\n      text: props.location.state.text,\n      pinyin: props.location.state.pinyin,\n      english: props.location.state.english,\n      italics: props.location.state.italics\n    }\n  }\n\trender(){\n\t  return (\n\t    <div className=\"App\">\n\t      <header className=\"App-header\">\n\t        <p>{this.state.text}</p>\n\t        <p>{this.state.pinyin}</p>\n\t        <p>Translation</p>\n            <input\n              value={this.state.english}\n              onChange={e => this.setState({ english: e.target.value })}\n              type=\"english\"\n              placeholder=\"Enter word's english translation\"\n              style={{width: \"250px\"}}\n            />\n            <p>Notes</p>\n\t        <input\n              value={this.state.italics}\n              onChange={e => this.setState({ italics: e.target.value })}\n              type=\"italics\"\n              placeholder=\"Enter word's extra notes\"\n              style={{width: \"250px\"}}\n            />\n            <Mutation mutation={EDIT_WORD}\n               update={(store) => {\n                   this.props.history.push({pathname: '/words' })                   \n                }}\n             >\n\t            {editWord => (\n\t              <button onClick={() => editWord({variables: {word_id: parseInt(this.state.word_id), english: this.state.english, italics: this.state.italics}})} disabled={this.state.english.length === 0}>\n\t              Submit\n\t              </button>\n\t            )}\n             </Mutation>\n\t      </header>\n\t    </div>\n\t  );\n  \t}\n}\n\nexport default WordEdit;","import React from \"react\";\n\nconst ProgressBar = (props) => {\n  const { bgcolor, completed } = props;\n\n  const containerStyles = {\n    height: 20,\n    width: '100%',\n    backgroundColor: \"#e0e0de\",\n  }\n\n  const fillerStyles = {\n    height: '100%',\n    width: `${completed}%`,\n    backgroundColor: bgcolor,\n    borderRadius: 'inherit',\n    textAlign: 'right'\n  }\n\n  return (\n    <div style={containerStyles}>\n      <div style={fillerStyles}>\n      </div>\n    </div>\n  );\n};\n\nexport default ProgressBar;","import React from 'react';\nimport '../styles/Modal.css';\n\nconst Modal = ({ handleClose, show, characters }) => {\n  const showHideClassName = show ? \"modal display-block\" : \"modal display-none\";\n\n  return (\n    <div className={showHideClassName}>\n      <section className=\"modal-main\">\n\t\t{\n\t\t\tcharacters.map(char => \n\t            <div>\n\t\t            <p>{char.text}</p>\n\t\t            <p>{char.english}</p>\n            \t</div>\n          )}\n        <button onClick={handleClose}>close</button>\n      </section>\n    </div>\n  );\n};\n\nexport default Modal;","import React, { Component } from 'react'\nimport {Query, Mutation} from 'react-apollo';\nimport gql from 'graphql-tag';\nimport { Howl } from 'howler';\nimport ProgressBar from './ProgressBar'\nimport Modal from './Modal'\nimport { getCookie} from '../utils'\n\n\n\nconst MAKE_ATTEMPT = gql`\n  mutation makeAttempt($userId: Int!, $sentenceId: Int!, $isCorrect: Boolean!) {\n\tmakeClozeAttempt(userId: $userId, sentenceId: $sentenceId, isCorrect: $isCorrect)\n  }\n\n`\n\nconst CREATE_USER = gql`\nmutation addTemporaryUser($user_name: String!, $email: String!, $password: String!, $role: String!) {\n  CreateUser(user_name: $user_name, email: $email, password: $password, role: $role) {\n    _id\n    user_name\n    role\n    token\n  }\n}\n\n`\n\nconst GET_SENTENCE = gql`\n  query getSentence($userId: Int!) {\n\tgetNextSentence(userId: $userId) {\n\t\t_id\n    time_fetched\n\t\traw_text\n\t\tdisplay_text\n    clean_text\n\t\tpinyin\n\t\tenglish\n    italics\n    interval{\n      interval_order\n    }\n\t\tword_taught{\n      word_id\n\t\t\ttext\n\t\t\tenglish\n      pinyin\n\t\t\tcharacters{\n\t\t\t\ttext\n\t\t\t\tenglish\n\t\t\t}\n\t\t}\n\n\t}\n\n  getCurrentProgress(userId: $userId){\n    words_learned\n    intervals_completed\n    total_word_count\n  }\n\n  }\n\n`\n\nclass Play extends Component {\n\tconstructor(){\n    super()\n    this.state = {\n    \tshowAnswer: false,\n      isSubmitted: false,\n      showCharacterDefinitions: false,\n    \tuserResponse: '',\n      isCorrect: true,\n      audio: null,\n      timeFetched: null,\n      user:{\n        user_name: null,\n        userId: null,\n        role: null\n      },\n      lastSentence: null\n\n    }\n  }\n\n  componentDidMount(){\n    if(this.props.user){\n      const {user_name, _id ,role} = this.props.user\n      this.setUserInfo(user_name, parseInt(_id), role)\n    }\n  }\n\n  setUserInfo(user_name, userId, role){\n    this.setState({user:{user_name, userId, role}})\n  }\n\n  componentDidUpdate(prevProps){\n    if(prevProps.user && this.props.user && this.props.user._id === prevProps.user._id && this.props.user.role === prevProps.user.role){\n      //do nothing\n    }else{\n      if(this.props.user){\n        const {user_name, _id ,role} = this.props.user\n        this.setUserInfo(user_name, parseInt(_id), role)\n      }else if(prevProps.user && !this.props.user){\n        this.setUserInfo(null,null,null)\n      }\n    }\n  }\n\n  showModal = () => {\n    this.setState({ showCharacterDefinitions: true });\n  };\n\n  hideModal = () => {\n    this.setState({ showCharacterDefinitions: false });\n  };\n\n\tcheckAnswer(correct_response) {\n\t\treturn correct_response === this.state.userResponse\n\t}\n\n  setAudio(interval, word_id) {\n    var Sounds\n     Sounds = new Howl({\n         src: [\"/audio/sentences/\" + interval + \"-\" + word_id + \".m4a\"]\n      })\n  \n    return Sounds\n  }\n\n  playSound(){\n    if(this.state.audio){\n        this.state.audio.play()\n    }\n  }\n\n  getFontColor(){\n    var color = 'black'\n    if(this.state.isSubmitted){\n      color = this.state.isCorrect ? 'green' : 'red'\n    }\n    return color\n  }\n\n  submitAnswer(makeAttempt, refetch, userId, sentenceId, correctResponse, time_fetched, isCorrect){\n    if(!this.state.isSubmitted){\n      makeAttempt({variables:{\n        userId: userId,\n        sentenceId: sentenceId,\n        isCorrect: isCorrect\n      }})\n    }\n     else if(this.state.isSubmitted && this.state.showAnswer){\n      this.setState({\n          showAnswer: false,\n          isSubmitted: false,\n          userResponse: '',\n          timeFetched: time_fetched,\n          showCharacterDefinitions: false,\n          audio: null,\n          lastSentence: null\n      })\n    } else{\n        this.setState({\n        showAnswer: true,\n        userResponse: correctResponse,\n        isCorrect: true,\n        }, () => {this.playSound()})\n    }\n  }\n\n  getText(text){\n    return(\n      <div style={{display: \"flex\", flexDirectioion: \"row\", justifyContent: \"center\"}}>\n      <p style={{fontSize: \"16px\"}}>{text.english}</p> <i style={{\"marginBlockStart\": \"1em\", fontSize: \"16px\"}}>{text.italics}</i>\n      </div>\n      )\n  }\n\n\n  playDashboard(userId,role){\n    return(\n      <Query query={GET_SENTENCE} variables={{userId: userId}}>\n          {({ loading, error, data, refetch }) => {\n            if (loading) return <div style={{\"marginTop\": \"30%\"}}>Fetching</div>\n            if (error) return <div style={{\"marginTop\": \"30%\"}}>error</div>\n            const nextSentence = this.state.lastSentence ||data.getNextSentence\n            //Don't rerender when waiting for refetch or when there is no result\n            if (nextSentence && this.state.timeFetched === nextSentence.time_fetched)  return <div/>\n            if(data.getNextSentence && data.getCurrentProgress){\n              const sentenceId = parseInt(nextSentence._id)\n                return(\n                  <div style={{width: \"50%\"}}>\n                  {role === \"TESTER\" && (<p style={{fontSize: \"12px\", \"marginBottom\": \"20px\"}}>You are currently not logged in. Log in to save your progress.</p>)}\n                    <div style={{width: \"30%\", \"marginBottom\": \"100px\", display: \"inline-block\"}}>\n                      <p style={{fontSize: \"14px\"}}>{\"Words Learned: \" + data.getCurrentProgress.words_learned + \"/\" + data.getCurrentProgress.total_word_count}</p>\n                      <p style={{fontSize: \"14px\"}}>{\"Cards Completed: \" + data.getCurrentProgress.intervals_completed}</p>\n                     <ProgressBar bgcolor={\"rgb(245 109 109)\"} completed={(data.getCurrentProgress.intervals_completed / (data.getCurrentProgress.total_word_count * 7)) * 100}  />\n                    </div>\n                  <div>\n                    {this.state.showAnswer && <button onClick={() => this.playSound(nextSentence._id, nextSentence.word_taught.word_id)}>replay audio</button>}\n                    <Modal characters={nextSentence.word_taught.characters} show={this.state.showCharacterDefinitions} handleClose={this.hideModal}/>\n                     <div style={{display: \"flex\", flexDirection: \"column\", justifyContent: \"center\"}}>\n                     {this.state.showAnswer && <p style={{fontSize: \"16px\"}}>{nextSentence.pinyin}</p>}\n                     {this.getText(nextSentence)}\n                      </div>\n                     <Mutation mutation={MAKE_ATTEMPT} refetchQueries={[{query: GET_SENTENCE, variables: {userId: userId}}]}\n                          update={(store) => {\n                            if(!this.state.isSubmitted){\n                              this.setState({\n                              isSubmitted: true,\n                              showAnswer: this.checkAnswer(nextSentence.word_taught.text),\n                              isCorrect: this.checkAnswer(nextSentence.word_taught.text),\n                              audio: this.setAudio(nextSentence.interval.interval_order, nextSentence.word_taught.word_id),\n                              lastSentence: nextSentence\n                              }, () => {\n                                if(this.checkAnswer(nextSentence.word_taught.text)){\n                                  this.playSound()\n                                }\n                              })\n                            }\n\n                            }\n                          }\n                         >\n                          {makeAttempt => (\n                            <div style={{display: \"flex\", flexDirectioion: \"row\", justifyContent: \"center\"}}>\n                             <p>{nextSentence.display_text.substr(0,nextSentence.display_text.indexOf('#'))}</p>\n                            <input style={{width: `${nextSentence.word_taught.text.length * 25}px`,fontSize: \"calc(10px + 2vmin)\", margin: \"15px 5px 15px 5px\", color: this.getFontColor()}} value={this.state.userResponse} onChange={e => this.setState({ userResponse: e.target.value })}\n                            onKeyDown={(e) => {\n                              if (e.key === 'Enter') {\n                                this.submitAnswer(makeAttempt, refetch, userId, sentenceId, nextSentence.word_taught.text, nextSentence.time_fetched, this.checkAnswer(nextSentence.word_taught.text))\n                              }\n                            }}\n                            />\n                             <p>{nextSentence.display_text.substr(nextSentence.display_text.indexOf('#') + 1,nextSentence.display_text.length)}</p>\n                            <button\n                              style={{margin: \"15px 5px 15px 5px\"}}\n                              onClick={() => \n                                {\n                                  this.submitAnswer(makeAttempt, refetch, userId, sentenceId, nextSentence.word_taught.text, nextSentence.time_fetched, this.checkAnswer(nextSentence.word_taught.text))\n                                }\n                              }\n                            >\n                            {this.state.showAnswer ? \">\" : \">\"}\n                            </button>\n                            </div>\n                          )}\n                    </Mutation>\n                  </div>\n                  <div>\n                    <p style={{fontSize: \"24px\"}}>{(nextSentence.clean_text !== nextSentence.word_taught.text) && nextSentence.word_taught.english}</p>\n                  </div>\n                  {this.state.showAnswer && nextSentence.word_taught.characters.length > 0 && <button onClick={() => this.setState(prevState => ({showCharacterDefinitions: !prevState.showCharacterDefinitions}))}>Character Definitions</button>}\n                  {(this.state.showAnswer &&  nextSentence.word_taught !==  nextSentence.word_taught.text) && (\n                      <div>\n                        <div style={{display: \"flex\", flexDirectioion: \"row\", justifyContent: \"center\"}}>\n                        <p>{nextSentence.word_taught.text}</p>\n                        <p style={{marginLeft: \"5px\"}}>{nextSentence.word_taught.pinyin}</p>\n                        </div>\n                      </div>\n                  )} \n              </div>\n            ) \n         }\n          else return <div>{!!getCookie('access-token') && (data && data.getCurrentProgress && data.getCurrentProgress.words_learned === 150)  ? \"Demo Complete\" : !getCookie('access-token') && \"Please login to continue\"}</div>\n         }}\n        </Query>\n    )\n\n  }\n\n   _confirm = async data => {\n    this.props.refetchUser()\n  }\n\n\trender() {\n\t  const {userId, role} = this.state.user\n\t  return (\n\t    <div className=\"App\">\n\t      <header className=\"App-header\">\n          {userId !==null && typeof userId !== 'undefined' ? this.playDashboard(userId, role): \n              <Mutation mutation={CREATE_USER}\n                onCompleted={data => this._confirm(data)}\n                >\n              {createUser => (\n              <div style={{\"marginTop\": \"25%\"}}>\n              <p>Remember to set your keyboard's language to Chinese</p>\n              <button onClick={()=> createUser({variables:{user_name: \"\", email: \"\", password: \"\", role: \"TESTER\"}})}>BEGIN</button>\n              </div>\n              )}\n            </Mutation>}\n\t      </header>\n\t    </div>\n\t  );\t\t\n\t}\n}\n\n\n\n\n\nexport default Play;","import React, { Component } from 'react'\n\n\n\n\nclass About extends Component {\n\n  render() {\n    return(\n      <div className=\"App\">\n        <header className=\"App-header\">\n        \n        </header>\n      </div>\n    )\n  }\n\n}\n\nexport default About","import React, { Component } from 'react'\nimport { Switch, Route } from 'react-router-dom'\nimport Login from './Login'\nimport Header from './Header'\nimport Author from './Author'\nimport Editor from './Editor'\nimport Words from './Words'\nimport WordEdit from './WordEdit'\nimport Play from './Play'\nimport About from './About'\nimport {Query} from 'react-apollo';\nimport gql from 'graphql-tag';\n\n\nconst GET_USER = gql`\nquery getUser {\n  me {\n    _id\n    user_name\n    role\n    password\n    token\n  }\n}\n`\n\n\n\n\n\nclass App extends Component {\n\n  render() {\n    return(\n      <div>\n      <Query query={GET_USER}>\n      {({ loading, error, data, refetch }) => {\n        if (loading) return <div>Fetching</div>\n        if (error) return <div>error</div>\n        const user = data.me\n        console.log(user)\n        return(\n        <div>\n          <Header user={user} refetchUser={refetch}/>\n          <Switch>\n            <Route exact path=\"/\" render={() => (<Play  user={user} refetchUser={refetch}/> )} />\n            {user && user.role === 'ADMIN' && (<Route exact path=\"/author\" component={Author} />)}\n            {user && user.role === 'ADMIN' && (<Route exact path=\"/editor\" component={Editor} />)}\n            {user && user.role === 'ADMIN' && (<Route exact path=\"/words\" component={Words} />)}\n            {user && user.role === 'ADMIN' && (<Route exact path=\"/wordedit\" component={WordEdit} />)}\n            <Route exact path=\"/login\" render={() => (<Login user={user} refetchUser={refetch}/>)} />\n            <Route exact path=\"/about\" component={About} />\n          </Switch>\n        {/*TODO: ADD footer with email adress*/}\n        </div>\n        )\n      }}\n      </Query>\n      </div>\n    )\n  }\n\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles/index.css'\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker';\nimport { ApolloProvider } from 'react-apollo'\n//import { onError } from \"apollo-link-error\";\nimport { ApolloClient } from 'apollo-client'\nimport { createHttpLink } from 'apollo-link-http'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { BrowserRouter } from 'react-router-dom'\n//import { setContext } from 'apollo-link-context'\n//import { getToken } from './constants'\n\n\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n  credentials: 'include'\n\n})\n\n\n/*const authLink = setContext((_, { headers }) => {\n  const token = getToken()\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : ''\n    }\n  }\n})*/\n/*const errorLink = onError(({ graphQLErrors, networkError }) => {\n    console.log(graphQLErrors, networkError)\n    if (graphQLErrors){\n      graphQLErrors.map(({ message, locations, path }) => {\n        console.log(\n          `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\n        )\n        \n\n      })\n    }\n\n\n  })*/\n\nconst client = new ApolloClient({\n  //link: authLink.concat(httpLink),\n  link: httpLink,\n  cache: new InMemoryCache()\n})\n\nReactDOM.render(\n  <BrowserRouter>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </BrowserRouter>,\n  document.getElementById('root')\n)\nserviceWorker.unregister();\n\n"],"sourceRoot":""}